{{
  var instcounter = 0;
  let labelTable = {}

/* Support functions */

  function getInstMemPosition() {
    const memIndex = instcounter * 4;
    instcounter = instcounter + 1;
    //console.log("mem ", memIndex);
    return memIndex;
  }

  function extractList(list, index) {
    return list.map(function(element) { return element[index]; });
  }

  function buildList(head, tail, index) {
    return [head].concat(extractList(tail, index));
  }

}}

{
  labelTable = options["symbols"];
}

  Start = Program 
    
  Program = root:SourceElements?
  {
    instcounter = 0;
    return root;
  }

  SourceElements = __ head:SourceElement tail:(__ SourceElement)* {
    return buildList(head, tail, 1);
  }

  SourceElement 
  = lbl:LabelDeclaration EOS 
  { return lbl; }
  / dir:Directive EOS {}
  / inst:Instruction EOS {}

  LabelDeclaration
  = id:IdentifierName _ ":"
  {
    labelTable[id] = {'name':id, 'memdef':instcounter*4, 'loc':location()};
    return {'name':id, 'memdef':instcounter*4, 'loc':location()};

  }

  Directive
  = id:DirectiveName _ val:QuotedString
  {}

  Instruction "Instruction"
    = inst:RInstruction {getInstMemPosition();}
    / inst:IInstruction {getInstMemPosition();}
    / inst:LInstruction {getInstMemPosition();}
    / inst:SInstruction {getInstMemPosition();}
    / inst:BInstruction {getInstMemPosition();}
    / inst:JInstruction {getInstMemPosition();}
    / inst:UInstruction {getInstMemPosition();}
    / inst:EInstruction {getInstMemPosition();}
    / inst:PseudoInstruction 
    { 
      // This is temporal, there are some pseudo instructions that are 
      // translated into more than one basic instruction and therefore will 
      // alter the instruction memory.

      getInstMemPosition();
    }
    / a:. .* {
      return error('Expecting a valid instruction, Got:"' + text() +'"');
    }
      
  // Parsing rule for R type instructions
  RInstruction "R-type instruction"
    = name:RInstName _ rd:RegisterName ___ rs1:RegisterName ___ rs2:RegisterName
    {}
  // Parsing rule for I type instructions
  IInstruction "I-type instruction"
    = name:IInstName _ rd:RegisterName ___ rs1:RegisterName ___ imm:Imm12 
    {}
    / addiToken _ rd:RegisterName ___ rs1:RegisterName ___ AsmModifier
    {
      console.log("Assembler modifier!");
    }
  /* Parsing rule for load instructions.
   *
   * They are I instructions but are written in a different format and hence
   * need a different rule.
   */
  LInstruction "Load instruction"
    = name:LoadInstName _ rd:RegisterName ___ offset:Imm12 _"("_ rs1:RegisterName _")" 
    {}
    
  // Parsing rule for store instructions
  SInstruction "Store instruction"
    = name:StoreInstName _ rs2:RegisterName ___ offset:Imm12 _"("_ rs1:RegisterName _")" 
    {}

  // Parsing rule for branch instructions
  BInstruction "Branch instruction"
    = name:BranchInstName _ rs1:RegisterName ___ rs2:RegisterName ___ target:BTarget
    {}

  // Parsing rule for jump instructions: jal and jalr
  JInstruction "Jump instruction"
    = name:jalrToken _ rd:RegisterName ___ rs1:RegisterName ___ offset:Imm12 
    {}
    /  name:jalToken _ rd:RegisterName ___ target:JTarget 
    {}
    
  // Parsing rule for upper immediate instructions
  UInstruction "Upper imm instruction"
    = luiToken _ rd:RegisterName ___  AsmModifier
    {}
    / name:UpperImmInstName _ rd:RegisterName ___ offset:Imm21 
    {}

  EInstruction "E instruction"
    = name:(ecallToken / ebreakToken) 
    {}

  PseudoInstruction "Pseudo instruction"
    = BPInstruction
    / JPInstruction
    / MiscInstruction

  BPInstruction "Branch pseudo instruction"
    = name:BPZInstName _ rs:RegisterName ___ offset:Imm13 
    {}
    / name:BPInstName _ rs1:RegisterName ___ rs2:RegisterName ___ offset:Imm13 
    {}
  
  JPInstruction "Jump pseudo instruction"
    = jalrToken _ rs:RegisterName
    {}
    / jalToken _ offset:Imm21
    {}
    / jrToken _ rs:RegisterName
    {}
//    / jToken _ offset:Imm21
    / jToken _ target:JTarget
    {}
    / retToken 
    {}
    
    MiscInstruction "Misc. instructions"
    = mvToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / nopToken 
    {}
    / notToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / negToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / seqzToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / snezToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / sltzToken _ rd:RegisterName ___ rs:RegisterName
    {}
    / sgtzToken _ rd:RegisterName ___ rs:RegisterName
    {}

  Imm12 "12 bits immediate"
  = val:Integer
    {}

  Imm13 "13 bits immediate"
  = val:Integer
    {}

  Imm21 "21 bits immediate"
  = val:Integer
  {}

  Imm32 "32 bits immediate"
  = val:Integer
    {}

  JTarget "target address of a jump instruction"
  = imm:Imm21 {}
  / lbl:Identifier {}

  BTarget "target address of a jump instruction"
  = imm:Imm13 {}
  / lbl:Identifier {}

  AsmModifier "assembler modifier"
  = "%" _ "lo" _ "(" _ Identifier _ ")"
  {}
  / "%" _ "hi" _ "(" _ Identifier _ ")"
  {}

  JumpInstName "jump instruction"
  = jalToken

  UpperImmInstName "upper immediate instruction"
  = luiToken
  / auipcToken
    
  BranchInstName "branch type instruction name"
  = beqToken
  / bneToken
  / bltToken
  / bgeToken
  / bltuToken
  / bgeuToken
  
  BPZInstName "branch zero pseudo instruction name"
  = beqzToken 
  / bnezToken
  / blezToken
  / bgezToken
  / bltzToken
  / bgtzToken 

  BPInstName "branch pseudo instruction name"
  = bgtuToken
  / bleuToken
  / bgtToken 
  / bleToken

  MiscInstName "misc. pseudo instruction name"
  = nopToken
  / liToken
  / mvToken
  / notToken
  / negToken
  / seqzToken
  / snezToken
  / sltzToken
  / sgtzToken

  StoreInstName "store type instruction name"
  = sbToken
  / shToken
  / swToken

  LoadInstName "load type instruction name"
  = lbToken
  / lhToken
  / lwToken
  / lbuToken
  / lhuToken
    
  RInstName "r-type instruction name"
  = addToken
  / subToken
  / xorToken
  / orToken
  / andToken
  / sllToken
  / srlToken
  / sraToken
  / sltToken
  / sltuToken
  
  IInstName "i-type instruction name"
  = addiToken
  / xoriToken
  / oriToken
  / andiToken
  / slliToken
  / srliToken
  / sraiToken
  / sltiToken
  / sltiuToken
  
  RegisterName "register name" 
  = reg:ABIRegister
  {}
  / reg:Register 
  {}

  Register "register"
  = x10Token
  / x11Token
  / x12Token
  / x13Token
  / x14Token
  / x15Token
  / x16Token
  / x17Token
  / x18Token
  / x19Token
  / x20Token
  / x21Token
  / x22Token
  / x23Token
  / x24Token
  / x25Token
  / x26Token
  / x27Token
  / x28Token
  / x29Token
  / x30Token
  / x31Token
  / x0Token
  / x1Token
  / x2Token
  / x3Token
  / x4Token
  / x5Token
  / x6Token
  / x7Token
  / x8Token
  / x9Token

  ABIRegister "ABI name for register"
  = reg:ZEROToken {}
  / reg:RAToken   {}
  / reg:SPToken   {}
  / reg:GPToken   {} 
  / reg:TPToken   {}
  / reg:T0Token   {}
  / reg:T1Token   {}  
  / reg:T2Token   {}  
  / reg:T3Token   {}  
  / reg:T4Token   {} 
  / reg:T5Token   {}  
  / reg:T6Token   {}  
  / reg:S0Token   {}
  / reg:FPToken   {}  
  / reg:S1Token   {}  
  / reg:S2Token   {}  
  / reg:S3Token   {}
  / reg:S4Token   {} 
  / reg:S5Token   {} 
  / reg:S6Token   {} 
  / reg:S7Token   {} 
  / reg:S8Token   {} 
  / reg:S9Token   {} 
  / reg:S10Token  {} 
  / reg:S11Token  {} 
  / reg:A0Token   {} 
  / reg:A1Token   {} 
  / reg:A2Token   {} 
  / reg:A3Token   {} 
  / reg:A4Token   {} 
  / reg:A5Token   {} 
  / reg:A6Token   {} 
  / reg:A7Token   {} 
    
  addToken  = "add"
  subToken  = "sub"
  xorToken  = "xor"
  orToken   = "or"
  andToken  = "and"
  sllToken  = "sll"
  srlToken  = "srl"
  sraToken  = "sra"
  sltToken  = "slt"
  sltuToken = "sltu"
  
  addiToken  = "addi"
  xoriToken  = "xori"
  oriToken   = "ori"
  andiToken  = "andi"
  slliToken  = "slli"
  srliToken  = "srli"
  sraiToken  = "srai"
  sltiToken  = "slti"
  sltiuToken = "sltiu"
  
  lbToken  = "lb"
  lhToken  = "lh"
  lwToken  = "lw"
  lbuToken = "lbu"
  lhuToken = "lhu"

  sbToken = "sb"
  shToken = "sh"
  swToken = "sw"
  
  beqToken  = "beq"
  bneToken  = "bne" 
  bltToken  = "blt"
  bgeToken  = "bge"
  bltuToken = "bltu"
  bgeuToken = "bgeu"

  jalrToken = "jalr"
  jalToken  = "jal"

  luiToken   = "lui"
  auipcToken = "auipc"

  ecallToken  = "ecall"
  ebreakToken = "ebreak"

  beqzToken = "beqz" 
  bnezToken = "bnez"
  blezToken = "blez"
  bgezToken = "bgez"
  bltzToken = "bltz"
  bgtzToken = "bgtz"

  bgtToken  = "bgt"
  bleToken  = "ble"
  bgtuToken = "bgtu"
  bleuToken = "bleu"

  jrToken   = "jr"
  jToken    = "j"
  retToken  = "ret"
  callToken = "call"
  tailToken = "tail"

  nopToken  = "nop"
  liToken   = "li"
  mvToken   = "mv"
  notToken  = "not"
  negToken  = "neg"
  seqzToken = "seqz"
  snezToken = "snez"
  sltzToken = "sltz"
  sgtzToken = "sgtz"
  
  x0Token    = "x0"
  x1Token    = "x1"
  x2Token    = "x2"
  x3Token    = "x3"
  x4Token    = "x4"
  x5Token    = "x5"
  x6Token    = "x6"
  x7Token    = "x7"
  x8Token    = "x8"
  x9Token    = "x9"
  x10Token   = "x10"
  x11Token   = "x11"
  x12Token   = "x12"
  x13Token   = "x13"
  x14Token   = "x14"
  x15Token   = "x15"
  x16Token   = "x16"
  x17Token   = "x17"
  x18Token   = "x18"
  x19Token   = "x19"
  x20Token   = "x20"
  x21Token   = "x21"
  x22Token   = "x22"
  x23Token   = "x23"
  x24Token   = "x24"
  x25Token   = "x25"
  x26Token   = "x26"
  x27Token   = "x27"
  x28Token   = "x28"
  x29Token   = "x29"
  x30Token   = "x30"
  x31Token   = "x31"
  
  ZEROToken = "zero"
  RAToken   = "ra"
  SPToken   = "sp"
  GPToken   = "gp"
  TPToken   = "tp"
  T0Token   = "t0"
  T1Token   = "t1"
  T2Token   = "t2"
  T3Token   = "t3"
  T4Token   = "t4"
  T5Token   = "t5"
  T6Token   = "t6"
  S0Token   = "s0"
  FPToken   = "fp"
  S1Token   = "s1"
  S2Token   = "s2"
  S3Token   = "s3"
  S4Token   = "s4"
  S5Token   = "s5"
  S6Token   = "s6"
  S7Token   = "s7"
  S8Token   = "s8"
  S9Token   = "s9"
  S10Token  = "s10"
  S11Token  = "s11"
  A0Token   = "a0"
  A1Token   = "a1"
  A2Token   = "a2"
  A3Token   = "a3"
  A4Token   = "a4"
  A5Token   = "a5"
  A6Token   = "a6"
  A7Token   = "a7"

  // Directive names
  DirectiveName
  = ascizToken
  
  ascizToken= ".asciz"


  Integer "Integer"
  = _ [\+-]?[0-9]+ 
  {}

  ReservedWord 
  = RegisterName
  / RInstName
  / IInstName
  / LoadInstName
  / StoreInstName
  / BranchInstName
  / UpperImmInstName
  / JumpInstName
  / BPInstName
  / BPZInstName
  / MiscInstName

  Identifier
  = !ReservedWord name:IdentifierName {}

  IdentifierName "identifier"
  = ![0-9][\._a-zA-Z0-9]+ 
  {return text();}

  QuotedString "quoted string"
  = "\"" (!"\"" SourceCharacter)* "\""
  {}

  __
  = (WhiteSpace / LineTerminatorSequence / Comment)*

  EOS
  = __
  / _ Comment? LineTerminatorSequence
  / _ &"}"
  / __ EOF
  
  Comment "comment"
  = ("#" / ";") (!LineTerminator SourceCharacter)*

  SourceCharacter = .

  LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"

  LineTerminator
  = [\n\r]

  EOF "End of file" = !.
  
  // Used to represent instruction registers sepparated by commas.
  ___ = _  "," _

  _  = (WhiteSpace)*

  WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "