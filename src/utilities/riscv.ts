// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/

"use strict";



  let instcounter: number;
  let labelTable = {};
  let constantTable = [];
  let directives = {};
  let dataTable = {};
  let instCountData: number;
  let counters = {};
  let simOptions = {};
/* Support functions */

  function getInstMemPosition() {
    const memIndex = instcounter * 4;
    instcounter = instcounter + 1;
    return memIndex;
  }

  function appendElement(arr: any[], element: any): void {
    if (!arr.includes(element)){
      arr.push(element);
    }
  }

  function createKey(obj: {}, key: string): void {
    if (!(key in obj)){
      obj[key] = [];
    }
  }

  function extractList(list, index) {
    return list.flatMap(t => t[index] );
  }

  function clearList(list){
    return list.filter(item => item !== undefined);
  }

  function buildList(head, tail: Array, index: Number) {
    if (Array.isArray(head)){
      if (tail.length === 0){
        return head;
      }
      tail.unshift([[], head[1]]);
      head = head[0];
    }
    const result = [head].concat(extractList(tail, index));
    return clearList(result);
  }

  function normParams(inst){
    if (inst === undefined){ return undefined; }
    let ret = inst;
    ret["kind"] = "SrcInstruction";
    const binEncoding = inst["encoding"]["binEncoding"];
    inst["encoding"]["hexEncoding"] = encodingAsHex(binEncoding);
    return ret; 
  }

  function verifySymbol(symbol){
    if (isDoubleInst(symbol)){
      getInstMemPosition();
    }
  }

  function isDoubleInst(symbol){
    return symbol["double"]
  }

  function calculateDistance(memdef: number, line: number): number{
    const distance = line * 4;
    return memdef - distance;
  }

  function getPosLabel(labelName: string): number {
    const pointsTo = labelTable[labelName];
    if (pointsTo === undefined){
      return undefined;
    }
    const value = pointsTo['memdef'];
    return value;
  }

  function getConstantValue(name: string): number {
    const value = constantTable.find((element) => element.name === name);
    return value?.value;
  }

  function getIdentifierValue(name): number {
    let value = getPosLabel(name);
    if (value === undefined){
      value = getConstantValue(lbl["name"]);
    }
    else {
      value = calculateDistance(value, instcounter);
    }
    return value;
  }

  function stringToAsciiList(text: string): number[] {
    const asciiList = Array.from(text).map(char => char.charCodeAt(0).toString(16).padStart(2, '0'));
    asciiList.push('00')
    return asciiList;
  }

  function setData(name: string, value: number | number[], typeAlign: string): void {
    dataTable[name] = {
      memdef: 0,
      value: Array.isArray(value) ? value: encodingAsHex(toBinaryString(value, 32)),
      typeAlign: typeAlign,
      align: undefined
    };
    return dataTable[name];
  }

  function setWritable(list: any[], writable: boolean): void {
    list.forEach(element => element.writable = writable);
  }

  function getDirFromData(name: string): number {
    const value = dataTable[name]?.memdef;
    return value;
  }

  function getInt(val) { return parseInt(val,10); }
  
  function isImm12(val) { return val >= -2048 && val <= 2047; }
  
  function isImm13(val) { return val >= -4096 && val <= 4095; }
  
  function isImm21(val) { return val >= -1048576 && val <= 1048575; }
  
  function isImm32(val) { return val >= -2147483648 && val <= 2147483648; }
  
  function isValidShift(val) { return val >= 0 && val < 32; }
  
  function isILogical(name) {
    return (name == 'slli'|| name == 'srli' || name == 'srai');
  }

  function shiftLeftLogical(val: number , shift: number): number { return val << shift; }
  
  function shiftRightLogical(val: number , shift: number): number { return val >> shift; }
  
  function applyBitMask(val: number, mask: number): number { return val & mask; }

  function toRadix (value, radix) {
    if (!Number.isSafeInteger(value)) {
      throw new TypeError('value must be a safe integer');
    }
    
    const digits = Math.ceil(64 / Math.log2(radix));
    const twosComplement = value < 0 ? BigInt(radix) ** BigInt(digits) + BigInt(value) : value;
    return twosComplement.toString(radix).padStart(digits, '0');
  }
  
  function toBinaryString(value, bitlength) {
    return toRadix(value,2).slice(bitlength * -1);
  }
  
  function encodingAsHex(binenc) {
    let hexEncoding = binenc.replace(/-/g,"");
    let groups4 = hexEncoding.match(/.{1,8}/g);
    
    let enc = groups4.map(
            (b8) => {
                      let hex = parseInt(b8,2).toString(16).toUpperCase();
                      let padHex = hex.padStart(2,"0");
                      return padHex;
                    }
            );
      return enc.toString().replace(/,/g,"-");
  }

  function regEnc(r) {
    return { regname: 'x'+r, regeq: 'x'+r, regenc: r}; 
  }

  function setPAsmList(insts: any[] | Object, text: string): void{
    if (Array.isArray(insts)){
      insts.forEach((element) => element? element.pseudoasm = text: element);
    }
    else {
      insts.pseudoasm = text;
    }
  }

  function extractRawText(fullText: string): string {
    const parts = fullText.split(' ').map(p => p.trim());
    return parts[parts.length - 1];
  }

  function setAsmIntsList(inst: any[]): void {
    if (Array.isArray(inst)){
      inst.forEach(element => { element?
        element.asm = getAsmInts(element): undefined
      });
    }
    else {
      inst.asm = getAsmInts(inst)
    }
  }

  function getAsmInts(inst: Object): string {
    const instruction = inst.instruction;
    const rd = inst.rd;
    const rs1 = inst.rs1;
    const rs2 = inst.rs2;
    const imm12 = inst.imm12;
    const offset = extractRawText(inst.pseudoasm);
    const type = inst.type;

    switch (type) {
      case "R":
        return `${instruction} ${rd.regname}, ${rs1.regname}, ${rs2.regname}`;

      case "I":
        return `${instruction} ${rd.regname}, ${rs1.regname}, ${imm12}`;
      
      case "S":
        return `${instruction} ${rd.regname}, ${imm12}(${rs1.regname})`;

      case "U":
        const imm21 = inst.imm21;
        return `${instruction} ${rd.regname}, ${imm21}`;

      case "J":
        return `${instruction} ${rd.regname}, ${offset}`;
      
      case "B":
        return `${instruction} ${rs1.regname}, ${rs2.regname}, ${offset}`;

      default:
        return '';
    }
  }

  function appendDataConstant(name: string, value: number): void {
    constantTable.push({name: name, value: value});
  }

  function handleRInstruction(name, rd, rs1, rs2, location, pseudo=false) {
    var funct3;
    var funct7;
    switch (name) {
      case 'add'  : funct3 = 0; funct7 = 0;  break;
      case 'sub'  : funct3 = 0; funct7 = 32; /* 32 = 0x20 */  break;
      case 'xor'  : funct3 = 4; funct7 = 0;  break;
      case 'or'   : funct3 = 6; funct7 = 0;  break;
      case 'and'  : funct3 = 7; funct7 = 0;  break;
      case 'sll'  : funct3 = 1; funct7 = 0;  break;
      case 'srl'  : funct3 = 5; funct7 = 0;  break;
      case 'sra'  : funct3 = 5; funct7 = 32; /* 32 = 0x20 */  break;
      case 'slt'  : funct3 = 2; funct7 = 0;  break;
      case 'sltu' : funct3 = 3; funct7 = 0;  break;
      case 'mul' : funct3 = 0; funct7 = 1;  break;
      case 'mulh' : funct3 = 1; funct7 = 1;  break;
      case 'mulsu' : funct3 = 2; funct7 = 1;  break;
      case 'mulu' : funct3 = 3; funct7 = 1;  break;
      case 'div' : funct3 = 4; funct7 = 1;  break;
      case 'divu' : funct3 = 5; funct7 = 1;  break;
      case 'rem' : funct3 = 6; funct7 = 1;  break;
      case 'remu' : funct3 = 7; funct7 = 1;  break;
    }
    const rdVal = getInt(rd["regenc"]);
    const rdBin = toBinaryString(rdVal,5);
    
    const funct3Bin = toBinaryString(funct3,3);
    const rs1Val = getInt(rs1["regenc"]);
    const rs1Bin = toBinaryString(rs1Val,5);
    
    const rs2Val = getInt(rs2["regenc"]);
    const rs2Bin = toBinaryString(rs2Val,5);
    const funct7Bin = toBinaryString(funct7,7);
    const opcode = "0110011";
    
    const binEncoding = 
      `${funct7Bin}${rs2Bin}${rs1Bin}${funct3Bin}${rdBin}${opcode}`;
    
    const encoding = {
      "binEncoding": binEncoding, "funct3": funct3Bin, "rs1": rs1Bin, 
      "rs2": rs2Bin, "rd": rdBin, "funct7": funct7Bin
    };
    
    return {
      "inst":getInstMemPosition(), "type":"R", "instruction": name, "rd":rd, 
      "rs1":rs1, "rs2": rs2, "funct3": funct3, "funct7": funct7, 
      "opcode": opcode, "encoding": encoding, "location":location, 
      "pseudo":pseudo
    };
    
  }

  function handleIInstruction(name, rd, rs1, imm, location, pseudo=false) {
    if (isILogical(name) && !isValidShift(imm)) {
      return error("Expecting valid shift ammount. Got " + imm);
    }
    
    let funct3  = 0;
    let funct7  = 0;
    let opcode = '0010011';
    let isLoad  = false;
    let isJalr  = false;
    let isEcall = false;

    switch (name) {
      case 'addi'  : funct3 = 0; break;
      case 'xori'  : funct3 = 4; break;
      case 'ori'   : funct3 = 6; break;
      case 'andi'  : funct3 = 7; break;
      case 'slli'  : funct3 = 1; funct7 = 0;  break;
      case 'srli'  : funct3 = 5; funct7 = 0;  break;
      case 'srai'  : funct3 = 5; funct7 = 1024;  /* 32 = 0x20 --> 1024 = 32 << 5 */ break;
      case 'slti'  : funct3 = 2; break;
      case 'sltiu' : funct3 = 3; break;

      // Load instructions
      case 'lb'  : {funct3 = 0; isLoad = true; } break;
      case 'lh'  : {funct3 = 1; isLoad = true; } break;
      case 'lw'  : {funct3 = 2; isLoad = true; } break;
      case 'lbu' : {funct3 = 4; isLoad = true; } break;
      case 'lhu' : {funct3 = 5; isLoad = true; } break;

      // Jalr instruction
      case 'jalr': {funct3 = 0; isJalr = true; opcode = '1100111'; } break;

      // Ecall and ebreak instructions
      case 'ecall' : {funct3 = 0; isJalr = true; opcode = '1110011'; } break;
      case 'ebreak': {funct3 = 0; isJalr = true; opcode = '1110011'; } break;
    }
    
    if (isLoad) {
      opcode = "0000011"; 
    } 

    const rdVal = getInt(rd["regenc"]);
    const rdBin = toBinaryString(rdVal,5);

    const funct3Bin = toBinaryString(funct3,3);

    const rs1Val = getInt(rs1["regenc"]);
    const rs1Bin = toBinaryString(rs1Val,5);

    let immVal = getInt(imm) + funct7;
    const immValBin = toBinaryString(immVal,12);

    const binEncoding = `${immValBin}${rs1Bin}${funct3Bin}${rdBin}${opcode}`;

    const encoding = {
      "rd": rdBin, "funct3": funct3Bin, "rs1": rs1Bin, "imm12":immValBin, 
      "binEncoding": binEncoding
    };

    return {
      "inst":getInstMemPosition(), "type":"I", "instruction": name, "rd":rd,
      "rs1":rs1, "imm12": imm, "funct3": funct3,  "opcode": opcode,
      "encoding":encoding, "location":location, "pseudo":pseudo
    };
  }

  function handleSInstruction(name, rs2, offset, rs1, location, pseudo=false) {
    var funct3;
    switch (name) {
      case 'sb'  : funct3 = 0; break;
      case 'sh'  : funct3 = 1; break;
      case 'sw'  : funct3 = 2; break;
    }
    const rs1Val = getInt(rs1["regenc"]);
    const rs1Bin = toBinaryString(rs1Val,5);
    
    const rs2Val = getInt(rs2["regenc"]);
    const rs2Bin = toBinaryString(rs2Val,5);

    const funct3Bin = toBinaryString(funct3,3);
      
    const immVal = getInt(offset);
    const immValBin = toBinaryString(immVal,12);
      
    const imm11_5 = immValBin.substring(0,7);
    const imm4_0 = immValBin.substring(7);

    const binEncoding = `${imm11_5}${rs2Bin}${rs1Bin}${funct3Bin}${imm4_0}0100011`;

    const encoding = {
      "funct3": funct3Bin, "rs1": rs1Bin, "rs2": rs2Bin, "imm12":immValBin,
      "binEncoding": binEncoding,
    };

    return {
      "inst":getInstMemPosition(), "type":"S", "instruction": name, "rs1":rs1, 
      "rs2":rs2, "imm12": offset, "funct3": funct3,  "opcode": "0100011", 
      "encoding":encoding, "location":location, "pseudoInst": pseudo
    };
  }

  function handleBInstruction(name, rs1, rs2, target, location, pseudo=false) {
    const instMem = getInstMemPosition();
    let funct3;
    switch (name) {
      case 'beq'   : funct3 = 0; break;
      case 'bne'   : funct3 = 1; break;
      case 'blt'   : funct3 = 4; break;
      case 'bge'   : funct3 = 5; break;
      case 'bltu'  : funct3 = 6; break;
      case 'bgeu'  : funct3 = 7; break;
    }
      
    const rs1Val = getInt(rs1["regenc"]);
    const rs1Bin = toBinaryString(rs1Val,5);
      
    const rs2Val = getInt(rs2["regenc"]);
    const rs2Bin = toBinaryString(rs2Val,5);

    const funct3Bin = toBinaryString(funct3,3);
    
    const tgtVal = getInt(target);
    const immVal = tgtVal - instMem;
    const immValBin = toBinaryString(immVal,13);

    const imm12 = immValBin.substring(0,1);
    const imm11 = immValBin.substring(1,2); 
    const imm10_5 = immValBin.substring(2,8); 
    const imm4_1 = immValBin.substring(8,12); 

    const funct7 = `${imm12}${imm10_5}`;
    const rd = `${imm4_1}${imm11}`;
      
    const encoding = {
      "binEncoding": `${funct7}${rs2Bin}${rs1Bin}${funct3Bin}${rd}1100011`,
      "imm[12]": imm12, "imm[10:5]":imm10_5, "imm[4:1]":imm4_1, "imm[11]":imm11,
      "funct3": funct3Bin, "funct7": funct7, "imm13":immValBin, "rs1":rs1Bin,
      "rs2":rs2Bin
    };

    return {
      "inst":instMem, "type":"B", "instruction": name, "rs1":rs1,
      "rs2":rs2, "imm13": target, "funct3": funct3, "opcode": "1100011", 
      "encoding":encoding, "location":location, "pseudoInst": pseudo
    };
  }

  function handleJInstruction(name, rd, target, location, pseudo=false) {
    const rdVal = getInt(rd["regenc"]);
    const rdBin = toBinaryString(rdVal,5);
    const instMem = getInstMemPosition();

    const tgtVal = getInt(target);
    const immVal = tgtVal - instMem;
    const immValBin = toBinaryString(immVal,21);
      
    const imm20 = immValBin.substring(0,1);
    const imm11 = immValBin.substring(9,10); 
    const imm19_12 = immValBin.substring(1,9); 
    const imm10_1 = immValBin.substring(10,20); 

    const binEncoding = `${imm20}${imm10_1}${imm11}${imm19_12}${rdBin}1101111`;

    const encoding = {
      "imm21":immValBin, "rd":rdBin,  "binEncoding": binEncoding, "imm[20]": imm20,
      "imm[11]": imm11, "imm[19:12]":imm19_12, "imm[10:1]":imm10_1, 
      "tgtVal": tgtVal
    };

    return {
      "inst":instMem, "type":"J", "instruction": name, "rd":rd,
      "imm21": immVal, "opcode": "1101111", "encoding":encoding,
      "location":location, "pseudo":pseudo
    };
  }

  function handleUInstruction(name, rd, offset, location, pseudo=false) {
    let opcode = null;
    if (name == "lui") { opcode = "0110111"; } else { opcode = "0010111"; }

    const rdVal = getInt(rd["regenc"]);
    const rdBin = toBinaryString(rdVal,5);

    const immVal = getInt(offset);
    const immValBin = toBinaryString(immVal,21).substring(1,22);
      
    const binEncoding = `${immValBin}${rdBin}${opcode}`;

    const encoding = {
      "rd": rdBin, "imm21": immValBin, "binEncoding": binEncoding
    };

    return {
      "inst":getInstMemPosition(), "type":"U", "instruction": name, "rd":rd,
      "imm21": offset, "opcode": opcode, "encoding":encoding, 
      "location":location, "pseudo":pseudo
    };
  }

  function handleBPInstruction(name, rs1, rs2, offset, location) {
    const zeroReg = { regname: 'x0', regeq: 'x0', regenc: '0'};
    if (rs2 == null) {
      let op = null;
      let r1 = null;
      let r2 = null;
      switch (name) {
        case 'beqz': {op = 'beq'; r1 = rs1;     r2 = zeroReg; } break;
        case 'bnez': {op = 'bne'; r1 = rs1;     r2 = zeroReg; } break;
        case 'blez': {op = 'bge'; r1 = zeroReg; r2 = rs1;      } break;
        case 'bgez': {op = 'bge'; r1 = rs1;     r2 = zeroReg; } break;
        case 'bltz': {op = 'blt'; r1 = rs1;     r2 = zeroReg; } break;
        case 'bgtz': {op = 'blt'; r1 = zeroReg; r2 = rs1;     } break;
      }
      return handleBInstruction(op, r1, r2, offset, location, true);
    } else {
      let op = null;
      switch (name) {
        case 'bgt' : op = 'blt';  break;
        case 'ble' : op = 'bge';  break;
        case 'bgtu': op = 'bltu'; break;
        case 'bleu': op = 'bgeu'; break;
      }
      return handleBInstruction(op, rs2, rs1, offset, location, true);
    }
  }


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart, Instruction: peg$parseInstruction, SourceElement: peg$parseSourceElement };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = ":";
  var peg$c1 = "(";
  var peg$c2 = ")";
  var peg$c3 = "%";
  var peg$c4 = "lo";
  var peg$c5 = "pcrel_lo";
  var peg$c6 = "pcrel_hi";
  var peg$c7 = "hi";
  var peg$c8 = "add";
  var peg$c9 = "sub";
  var peg$c10 = "xor";
  var peg$c11 = "or";
  var peg$c12 = "and";
  var peg$c13 = "sll";
  var peg$c14 = "srl";
  var peg$c15 = "sra";
  var peg$c16 = "slt";
  var peg$c17 = "sltu";
  var peg$c18 = "mul";
  var peg$c19 = "mulh";
  var peg$c20 = "mulsu";
  var peg$c21 = "mulu";
  var peg$c22 = "div";
  var peg$c23 = "divu";
  var peg$c24 = "rem";
  var peg$c25 = "remu";
  var peg$c26 = "addi";
  var peg$c27 = "xori";
  var peg$c28 = "ori";
  var peg$c29 = "andi";
  var peg$c30 = "slli";
  var peg$c31 = "srli";
  var peg$c32 = "srai";
  var peg$c33 = "slti";
  var peg$c34 = "sltiu";
  var peg$c35 = "lb";
  var peg$c36 = "lh";
  var peg$c37 = "lw";
  var peg$c38 = "lbu";
  var peg$c39 = "lhu";
  var peg$c40 = "sb";
  var peg$c41 = "sh";
  var peg$c42 = "sw";
  var peg$c43 = "beq";
  var peg$c44 = "bne";
  var peg$c45 = "blt";
  var peg$c46 = "bge";
  var peg$c47 = "bltu";
  var peg$c48 = "bgeu";
  var peg$c49 = "jalr";
  var peg$c50 = "jal";
  var peg$c51 = "lui";
  var peg$c52 = "auipc";
  var peg$c53 = "ecall";
  var peg$c54 = "ebreak";
  var peg$c55 = "beqz";
  var peg$c56 = "bnez";
  var peg$c57 = "blez";
  var peg$c58 = "bgez";
  var peg$c59 = "bltz";
  var peg$c60 = "bgtz";
  var peg$c61 = "bgt";
  var peg$c62 = "ble";
  var peg$c63 = "bgtu";
  var peg$c64 = "bleu";
  var peg$c65 = "jr";
  var peg$c66 = "j";
  var peg$c67 = "ret";
  var peg$c68 = "call";
  var peg$c69 = "tail";
  var peg$c70 = "nop";
  var peg$c71 = "li";
  var peg$c72 = "mv";
  var peg$c73 = "not";
  var peg$c74 = "neg";
  var peg$c75 = "seqz";
  var peg$c76 = "snez";
  var peg$c77 = "sltz";
  var peg$c78 = "sgtz";
  var peg$c79 = "sgt";
  var peg$c80 = "la";
  var peg$c81 = "x0";
  var peg$c82 = "x1";
  var peg$c83 = "x2";
  var peg$c84 = "x3";
  var peg$c85 = "x4";
  var peg$c86 = "x5";
  var peg$c87 = "x6";
  var peg$c88 = "x7";
  var peg$c89 = "x8";
  var peg$c90 = "x9";
  var peg$c91 = "x10";
  var peg$c92 = "x11";
  var peg$c93 = "x12";
  var peg$c94 = "x13";
  var peg$c95 = "x14";
  var peg$c96 = "x15";
  var peg$c97 = "x16";
  var peg$c98 = "x17";
  var peg$c99 = "x18";
  var peg$c100 = "x19";
  var peg$c101 = "x20";
  var peg$c102 = "x21";
  var peg$c103 = "x22";
  var peg$c104 = "x23";
  var peg$c105 = "x24";
  var peg$c106 = "x25";
  var peg$c107 = "x26";
  var peg$c108 = "x27";
  var peg$c109 = "x28";
  var peg$c110 = "x29";
  var peg$c111 = "x30";
  var peg$c112 = "x31";
  var peg$c113 = "zero";
  var peg$c114 = "ra";
  var peg$c115 = "sp";
  var peg$c116 = "gp";
  var peg$c117 = "tp";
  var peg$c118 = "t0";
  var peg$c119 = "t1";
  var peg$c120 = "t2";
  var peg$c121 = "t3";
  var peg$c122 = "t4";
  var peg$c123 = "t5";
  var peg$c124 = "t6";
  var peg$c125 = "s0";
  var peg$c126 = "fp";
  var peg$c127 = "s1";
  var peg$c128 = "s2";
  var peg$c129 = "s3";
  var peg$c130 = "s4";
  var peg$c131 = "s5";
  var peg$c132 = "s6";
  var peg$c133 = "s7";
  var peg$c134 = "s8";
  var peg$c135 = "s9";
  var peg$c136 = "s10";
  var peg$c137 = "s11";
  var peg$c138 = "a0";
  var peg$c139 = "a1";
  var peg$c140 = "a2";
  var peg$c141 = "a3";
  var peg$c142 = "a4";
  var peg$c143 = "a5";
  var peg$c144 = "a6";
  var peg$c145 = "a7";
  var peg$c146 = ".asciz";
  var peg$c147 = ".equ";
  var peg$c148 = ".section";
  var peg$c149 = ".text";
  var peg$c150 = ".data";
  var peg$c151 = ".rodata";
  var peg$c152 = ".bss";
  var peg$c153 = ".comm";
  var peg$c154 = ".common";
  var peg$c155 = ".2byte";
  var peg$c156 = ".4byte";
  var peg$c157 = ".half";
  var peg$c158 = ".word";
  var peg$c159 = ".byte";
  var peg$c160 = ".string";
  var peg$c161 = ".zero";
  var peg$c162 = ".global";
  var peg$c163 = ".globl";
  var peg$c164 = "0x";
  var peg$c165 = "0X";
  var peg$c166 = "\"";
  var peg$c167 = "\\\"";
  var peg$c168 = "\\n";
  var peg$c169 = "\\t";
  var peg$c170 = "\\\\";
  var peg$c171 = "}";
  var peg$c172 = "\n";
  var peg$c173 = "\r\n";
  var peg$c174 = "\r";
  var peg$c175 = ",";

  var peg$r0 = /^[0-9a-fA-F]/;
  var peg$r1 = /^[+\-]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[^)]/;
  var peg$r4 = /^[a-zA-Z_.]/;
  var peg$r5 = /^[a-zA-Z0-9_]/;
  var peg$r6 = /^["\\"]/;
  var peg$r7 = /^[#;]/;
  var peg$r8 = /^[\n\r]/;
  var peg$r9 = /^[\t\v-\f ]/;

  var peg$e0 = peg$anyExpectation();
  var peg$e1 = peg$literalExpectation(":", false);
  var peg$e2 = peg$otherExpectation("Instruction");
  var peg$e3 = peg$otherExpectation("R-type instruction");
  var peg$e4 = peg$otherExpectation("I-type instruction");
  var peg$e5 = peg$otherExpectation("Load instruction");
  var peg$e6 = peg$literalExpectation("(", false);
  var peg$e7 = peg$literalExpectation(")", false);
  var peg$e8 = peg$otherExpectation("Store instruction");
  var peg$e9 = peg$otherExpectation("Branch instruction");
  var peg$e10 = peg$otherExpectation("Jump instruction");
  var peg$e11 = peg$otherExpectation("Upper imm instruction");
  var peg$e12 = peg$otherExpectation("E instruction");
  var peg$e13 = peg$otherExpectation("Pseudo instruction");
  var peg$e14 = peg$otherExpectation("Branch pseudo instruction");
  var peg$e15 = peg$otherExpectation("Jump pseudo instruction");
  var peg$e16 = peg$otherExpectation("Misc. instructions");
  var peg$e17 = peg$otherExpectation("Load pseudo instructions");
  var peg$e18 = peg$otherExpectation("store pseudo instruction");
  var peg$e19 = peg$otherExpectation("12 bits immediate");
  var peg$e20 = peg$otherExpectation("13 bits immediate");
  var peg$e21 = peg$otherExpectation("21 bits immediate");
  var peg$e22 = peg$otherExpectation("32 bits immediate");
  var peg$e23 = peg$otherExpectation("target address of a jump instruction");
  var peg$e24 = peg$otherExpectation("number 12 bit or 32 bit representable");
  var peg$e25 = peg$otherExpectation("labels or symbols");
  var peg$e26 = peg$otherExpectation("Address or symbols");
  var peg$e27 = peg$otherExpectation("Constant name for 32 bit representable value loaded from .equ directive");
  var peg$e28 = peg$otherExpectation("Constant name for 12 bit representable value loaded from .equ directive");
  var peg$e29 = peg$otherExpectation("Constant name for 13 bit representable value loaded from .equ directive");
  var peg$e30 = peg$otherExpectation("Constant name for 21 bit representable value loaded from .equ directive");
  var peg$e31 = peg$otherExpectation("Imm12, Asm modifier low or ConstantName12");
  var peg$e32 = peg$otherExpectation("Imm13, Asm modifier low or ConstantName13");
  var peg$e33 = peg$otherExpectation("Imm21, Asm modifier high or ConstantName21");
  var peg$e34 = peg$otherExpectation("Symbol or ConstantName32");
  var peg$e35 = peg$otherExpectation("target address of a jalr instruction");
  var peg$e36 = peg$otherExpectation("assembler modifier");
  var peg$e37 = peg$literalExpectation("%", false);
  var peg$e38 = peg$literalExpectation("lo", false);
  var peg$e39 = peg$literalExpectation("pcrel_lo", false);
  var peg$e40 = peg$literalExpectation("pcrel_hi", false);
  var peg$e41 = peg$literalExpectation("hi", false);
  var peg$e42 = peg$otherExpectation("jump instruction");
  var peg$e43 = peg$otherExpectation("upper immediate instruction");
  var peg$e44 = peg$otherExpectation("branch type instruction name");
  var peg$e45 = peg$otherExpectation("branch zero pseudo instruction name");
  var peg$e46 = peg$otherExpectation("branch pseudo instruction name");
  var peg$e47 = peg$otherExpectation("misc. pseudo instruction name");
  var peg$e48 = peg$otherExpectation("store type instruction name");
  var peg$e49 = peg$otherExpectation("load type instruction name");
  var peg$e50 = peg$otherExpectation("load unsigned type instruction name");
  var peg$e51 = peg$otherExpectation("r-type instruction name");
  var peg$e52 = peg$otherExpectation("i-type instruction name");
  var peg$e53 = peg$otherExpectation("register name");
  var peg$e54 = peg$otherExpectation("register");
  var peg$e55 = peg$otherExpectation("ABI name for register");
  var peg$e56 = peg$literalExpectation("add", false);
  var peg$e57 = peg$literalExpectation("sub", false);
  var peg$e58 = peg$literalExpectation("xor", false);
  var peg$e59 = peg$literalExpectation("or", false);
  var peg$e60 = peg$literalExpectation("and", false);
  var peg$e61 = peg$literalExpectation("sll", false);
  var peg$e62 = peg$literalExpectation("srl", false);
  var peg$e63 = peg$literalExpectation("sra", false);
  var peg$e64 = peg$literalExpectation("slt", false);
  var peg$e65 = peg$literalExpectation("sltu", false);
  var peg$e66 = peg$literalExpectation("mul", false);
  var peg$e67 = peg$literalExpectation("mulh", false);
  var peg$e68 = peg$literalExpectation("mulsu", false);
  var peg$e69 = peg$literalExpectation("mulu", false);
  var peg$e70 = peg$literalExpectation("div", false);
  var peg$e71 = peg$literalExpectation("divu", false);
  var peg$e72 = peg$literalExpectation("rem", false);
  var peg$e73 = peg$literalExpectation("remu", false);
  var peg$e74 = peg$literalExpectation("addi", false);
  var peg$e75 = peg$literalExpectation("xori", false);
  var peg$e76 = peg$literalExpectation("ori", false);
  var peg$e77 = peg$literalExpectation("andi", false);
  var peg$e78 = peg$literalExpectation("slli", false);
  var peg$e79 = peg$literalExpectation("srli", false);
  var peg$e80 = peg$literalExpectation("srai", false);
  var peg$e81 = peg$literalExpectation("slti", false);
  var peg$e82 = peg$literalExpectation("sltiu", false);
  var peg$e83 = peg$literalExpectation("lb", false);
  var peg$e84 = peg$literalExpectation("lh", false);
  var peg$e85 = peg$literalExpectation("lw", false);
  var peg$e86 = peg$literalExpectation("lbu", false);
  var peg$e87 = peg$literalExpectation("lhu", false);
  var peg$e88 = peg$literalExpectation("sb", false);
  var peg$e89 = peg$literalExpectation("sh", false);
  var peg$e90 = peg$literalExpectation("sw", false);
  var peg$e91 = peg$literalExpectation("beq", false);
  var peg$e92 = peg$literalExpectation("bne", false);
  var peg$e93 = peg$literalExpectation("blt", false);
  var peg$e94 = peg$literalExpectation("bge", false);
  var peg$e95 = peg$literalExpectation("bltu", false);
  var peg$e96 = peg$literalExpectation("bgeu", false);
  var peg$e97 = peg$literalExpectation("jalr", false);
  var peg$e98 = peg$literalExpectation("jal", false);
  var peg$e99 = peg$literalExpectation("lui", false);
  var peg$e100 = peg$literalExpectation("auipc", false);
  var peg$e101 = peg$literalExpectation("ecall", false);
  var peg$e102 = peg$literalExpectation("ebreak", false);
  var peg$e103 = peg$literalExpectation("beqz", false);
  var peg$e104 = peg$literalExpectation("bnez", false);
  var peg$e105 = peg$literalExpectation("blez", false);
  var peg$e106 = peg$literalExpectation("bgez", false);
  var peg$e107 = peg$literalExpectation("bltz", false);
  var peg$e108 = peg$literalExpectation("bgtz", false);
  var peg$e109 = peg$literalExpectation("bgt", false);
  var peg$e110 = peg$literalExpectation("ble", false);
  var peg$e111 = peg$literalExpectation("bgtu", false);
  var peg$e112 = peg$literalExpectation("bleu", false);
  var peg$e113 = peg$literalExpectation("jr", false);
  var peg$e114 = peg$literalExpectation("j", false);
  var peg$e115 = peg$literalExpectation("ret", false);
  var peg$e116 = peg$literalExpectation("call", false);
  var peg$e117 = peg$literalExpectation("tail", false);
  var peg$e118 = peg$literalExpectation("nop", false);
  var peg$e119 = peg$literalExpectation("li", false);
  var peg$e120 = peg$literalExpectation("mv", false);
  var peg$e121 = peg$literalExpectation("not", false);
  var peg$e122 = peg$literalExpectation("neg", false);
  var peg$e123 = peg$literalExpectation("seqz", false);
  var peg$e124 = peg$literalExpectation("snez", false);
  var peg$e125 = peg$literalExpectation("sltz", false);
  var peg$e126 = peg$literalExpectation("sgtz", false);
  var peg$e127 = peg$literalExpectation("sgt", false);
  var peg$e128 = peg$literalExpectation("la", false);
  var peg$e129 = peg$literalExpectation("x0", false);
  var peg$e130 = peg$literalExpectation("x1", false);
  var peg$e131 = peg$literalExpectation("x2", false);
  var peg$e132 = peg$literalExpectation("x3", false);
  var peg$e133 = peg$literalExpectation("x4", false);
  var peg$e134 = peg$literalExpectation("x5", false);
  var peg$e135 = peg$literalExpectation("x6", false);
  var peg$e136 = peg$literalExpectation("x7", false);
  var peg$e137 = peg$literalExpectation("x8", false);
  var peg$e138 = peg$literalExpectation("x9", false);
  var peg$e139 = peg$literalExpectation("x10", false);
  var peg$e140 = peg$literalExpectation("x11", false);
  var peg$e141 = peg$literalExpectation("x12", false);
  var peg$e142 = peg$literalExpectation("x13", false);
  var peg$e143 = peg$literalExpectation("x14", false);
  var peg$e144 = peg$literalExpectation("x15", false);
  var peg$e145 = peg$literalExpectation("x16", false);
  var peg$e146 = peg$literalExpectation("x17", false);
  var peg$e147 = peg$literalExpectation("x18", false);
  var peg$e148 = peg$literalExpectation("x19", false);
  var peg$e149 = peg$literalExpectation("x20", false);
  var peg$e150 = peg$literalExpectation("x21", false);
  var peg$e151 = peg$literalExpectation("x22", false);
  var peg$e152 = peg$literalExpectation("x23", false);
  var peg$e153 = peg$literalExpectation("x24", false);
  var peg$e154 = peg$literalExpectation("x25", false);
  var peg$e155 = peg$literalExpectation("x26", false);
  var peg$e156 = peg$literalExpectation("x27", false);
  var peg$e157 = peg$literalExpectation("x28", false);
  var peg$e158 = peg$literalExpectation("x29", false);
  var peg$e159 = peg$literalExpectation("x30", false);
  var peg$e160 = peg$literalExpectation("x31", false);
  var peg$e161 = peg$literalExpectation("zero", false);
  var peg$e162 = peg$literalExpectation("ra", false);
  var peg$e163 = peg$literalExpectation("sp", false);
  var peg$e164 = peg$literalExpectation("gp", false);
  var peg$e165 = peg$literalExpectation("tp", false);
  var peg$e166 = peg$literalExpectation("t0", false);
  var peg$e167 = peg$literalExpectation("t1", false);
  var peg$e168 = peg$literalExpectation("t2", false);
  var peg$e169 = peg$literalExpectation("t3", false);
  var peg$e170 = peg$literalExpectation("t4", false);
  var peg$e171 = peg$literalExpectation("t5", false);
  var peg$e172 = peg$literalExpectation("t6", false);
  var peg$e173 = peg$literalExpectation("s0", false);
  var peg$e174 = peg$literalExpectation("fp", false);
  var peg$e175 = peg$literalExpectation("s1", false);
  var peg$e176 = peg$literalExpectation("s2", false);
  var peg$e177 = peg$literalExpectation("s3", false);
  var peg$e178 = peg$literalExpectation("s4", false);
  var peg$e179 = peg$literalExpectation("s5", false);
  var peg$e180 = peg$literalExpectation("s6", false);
  var peg$e181 = peg$literalExpectation("s7", false);
  var peg$e182 = peg$literalExpectation("s8", false);
  var peg$e183 = peg$literalExpectation("s9", false);
  var peg$e184 = peg$literalExpectation("s10", false);
  var peg$e185 = peg$literalExpectation("s11", false);
  var peg$e186 = peg$literalExpectation("a0", false);
  var peg$e187 = peg$literalExpectation("a1", false);
  var peg$e188 = peg$literalExpectation("a2", false);
  var peg$e189 = peg$literalExpectation("a3", false);
  var peg$e190 = peg$literalExpectation("a4", false);
  var peg$e191 = peg$literalExpectation("a5", false);
  var peg$e192 = peg$literalExpectation("a6", false);
  var peg$e193 = peg$literalExpectation("a7", false);
  var peg$e194 = peg$literalExpectation(".asciz", false);
  var peg$e195 = peg$literalExpectation(".equ", false);
  var peg$e196 = peg$literalExpectation(".section", false);
  var peg$e197 = peg$literalExpectation(".text", false);
  var peg$e198 = peg$literalExpectation(".data", false);
  var peg$e199 = peg$literalExpectation(".rodata", false);
  var peg$e200 = peg$literalExpectation(".bss", false);
  var peg$e201 = peg$literalExpectation(".comm", false);
  var peg$e202 = peg$literalExpectation(".common", false);
  var peg$e203 = peg$literalExpectation(".2byte", false);
  var peg$e204 = peg$literalExpectation(".4byte", false);
  var peg$e205 = peg$literalExpectation(".half", false);
  var peg$e206 = peg$literalExpectation(".word", false);
  var peg$e207 = peg$literalExpectation(".byte", false);
  var peg$e208 = peg$literalExpectation(".string", false);
  var peg$e209 = peg$literalExpectation(".zero", false);
  var peg$e210 = peg$literalExpectation(".global", false);
  var peg$e211 = peg$literalExpectation(".globl", false);
  var peg$e212 = peg$otherExpectation("Integer");
  var peg$e213 = peg$literalExpectation("0x", false);
  var peg$e214 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e215 = peg$literalExpectation("0X", false);
  var peg$e216 = peg$classExpectation(["+", "-"], false, false);
  var peg$e217 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e218 = peg$otherExpectation("Label identifier");
  var peg$e219 = peg$classExpectation([")"], true, false);
  var peg$e220 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "."], false, false);
  var peg$e221 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e222 = peg$literalExpectation("\"", false);
  var peg$e223 = peg$literalExpectation("\\\"", false);
  var peg$e224 = peg$literalExpectation("\\n", false);
  var peg$e225 = peg$literalExpectation("\\t", false);
  var peg$e226 = peg$literalExpectation("\\\\", false);
  var peg$e227 = peg$classExpectation(["\"", "\\", "\""], false, false);
  var peg$e228 = peg$otherExpectation("quoted string");
  var peg$e229 = peg$literalExpectation("}", false);
  var peg$e230 = peg$otherExpectation("comment");
  var peg$e231 = peg$classExpectation(["#", ";"], false, false);
  var peg$e232 = peg$otherExpectation("end of line");
  var peg$e233 = peg$literalExpectation("\n", false);
  var peg$e234 = peg$literalExpectation("\r\n", false);
  var peg$e235 = peg$literalExpectation("\r", false);
  var peg$e236 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e237 = peg$otherExpectation("End of file");
  var peg$e238 = peg$literalExpectation(",", false);
  var peg$e239 = peg$otherExpectation("whitespace");
  var peg$e240 = peg$classExpectation(["\t", ["\v", "\f"], " "], false, false);

  var peg$f0 = function(root) {
    if(isFirstPass) { 
      counters.instcounter = instcounter;
      counters.instCountData = instCountData;
      return undefined; 
      }
    // instcounter = 0;
    const programMemory = root.filter((sourceElement) => {
      return sourceElement.kind === "SrcInstruction";
    });
    return programMemory;
  };
  var peg$f1 = function(head, tail) {
    if (isFirstPass){ return undefined; }
    return buildList(head, tail, 1);
  };
  var peg$f2 = function(dir) {
    let ret = dir;
    ret["kind"] = "SrcDirective"; 
    ret["location"] = location();
    if (isFirstPass){
      createKey(directives, dir.directive);
      appendElement(directives[dir.directive], ret);
    }
    // directives.push(dir.directive)
    return dir; 
  };
  var peg$f3 = function(lbl) { 
    let ret = lbl;
    ret["kind"] = "SrcLabel";
    ret["location"] = location();
    return ret;
  };
  var peg$f4 = function(inst) {
    if (isFirstPass) { return undefined; }
  
    let ret = inst;
    if (Array.isArray(inst)){
      for (let i = 0;i<ret.length;i++){
        ret[i] = normParams(ret[i]);
      }
    }
    else{
      ret = normParams(ret);
    }
    return ret; 
  };
  var peg$f5 = function(a) {
      return error('Expecting a valid instruction, directive or label, Got:"' + text() +'"');
  };
  var peg$f6 = function(id) {
    // During preparsing the labes were transformed into absolute memory
    // addresses. At this point we only check that everything is ok and every 
    // label we find is already in labelTable

    if (isFirstPass) {
      if (id.name in labelTable){
        return error(`Duplicate identifier: ${id.name} found multiple times`);
      }
      labelTable[id.name] = {name:id.name, memdef:instcounter*4};
    } else {
      if (!(id['name'] in labelTable)) {
        console.error("Label not found!");
      }
    }
    return {identifier:id, targetInstruction:instcounter*4};
  };
  var peg$f7 = function(id, align, value) {
    if (isFirstPass){
      if (id.name in dataTable){
        return error(`Duplicate identifier: ${id.name} found multiple times`);
      }
      // instCountData += 1;
      return setData(id.name, value, align);
    }    
    // else{
    //   return setValueData(id.name, instCountData, align);
    // }
  };
  var peg$f8 = function(id, align, value) {
    if (isFirstPass){
      if (id.name in dataTable){
        return error(`Duplicate identifier: ${id.name} found multiple times`);
      }
      return setData(id.name, stringToAsciiList(value), align);
    }
    // else{
    //   return setValueData(id.name, instCountData, align);
    // }
  };
  var peg$f9 = function(name, val) {
    if (isFirstPass){
      if (name.name in constantTable){
        return error(`Duplicate identifier: ${name.name} found multiple times`);
      }
      appendDataConstant(name.name, val);
    }
    return {directive: ".equ", identifier: name.name, value: val};
  };
  var peg$f10 = function() {
    return {directive: ".text"};
  };
  var peg$f11 = function(head, tail) {
    if (isFirstPass){
      const fullData = buildList(head, tail, 1);
      setWritable(fullData, true);
    }
    return {directive: ".data"};

  };
  var peg$f12 = function(head, tail) {
    if (isFirstPass){
      const fullData = buildList(head, tail, 1);
      setWritable(fullData, false);
    }
    return {directive: ".rodata"};

  };
  var peg$f13 = function(head, tail) {
    if (isFirstPass){
      const fullData = buildList(head, tail, 1);
      setWritable(fullData, true);
    }
    return {directive: ".bss"};
  };
  var peg$f14 = function(lbl) {
    if (!isFirstPass){
      simOptions.pc = getPosLabel(lbl.name);
    }
    return {directive: ".global", name: lbl.name};
  };
  var peg$f15 = function(lbl) {
    if (!isFirstPass){
      simOptions.pc = getPosLabel(lbl.name);
    }
    return {directive: ".globl", name: lbl.name};
  };
  var peg$f16 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f17 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f18 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f19 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f20 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f21 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }  
      inst["asm"] = text();
      return inst;
    };
  var peg$f22 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }  
      inst["asm"] = text();
      return inst;
    };
  var peg$f23 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      inst["asm"] = text();
      return inst;
    };
  var peg$f24 = function(inst) {
      if (isFirstPass) { 
        getInstMemPosition();
        return undefined; 
      }
      setPAsmList(inst, text());
      setAsmIntsList(inst);
      return inst;
    };
  var peg$f25 = function(name, rd, rs1, rs2) { 
      if (isFirstPass) { return undefined; }
      return handleRInstruction(name, rd, rs1, rs2, location()); 
    };
  var peg$f26 = function(name, rd, rs1, imm) { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(name, rd, rs1, imm, location()); 
    };
  var peg$f27 = function(name, rd, offset, rs1) { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(name, rd, rs1, offset, location()); 
    };
  var peg$f28 = function(name, rd, offset, rs1) { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(name, rd, rs1, offset, location()); 
    };
  var peg$f29 = function(name, rs2, offset, rs1) {
      if (isFirstPass) { return undefined; }
      return handleSInstruction(name, rs2, offset, rs1, location()); 
    };
  var peg$f30 = function(name, rs1, rs2, target) { 
      if (isFirstPass) { return undefined; } 
      return handleBInstruction(name, rs1, rs2, target, location()); 
    };
  var peg$f31 = function(name, rd, rs1, offset) { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(name, rd, rs1, offset, location()); 
    };
  var peg$f32 = function(name, rd, offset, rs1) { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(name, rd, rs1, offset, location()); 
    };
  var peg$f33 = function(name, rd, target) {
      if (isFirstPass) { return undefined; }
      return handleJInstruction(name, rd, target, location()); 
    };
  var peg$f34 = function(name, rd, offset) { 
      if (isFirstPass) { return undefined; }
      return handleUInstruction(name, rd, offset, location()); 
    };
  var peg$f35 = function(name) {
      if (isFirstPass) { return undefined; }
      const zeroReg = { regname: 'x0', regeq: 'x0', regenc: '0'};
      if (name == 'ecall') {
        return handleIInstruction(name, zeroReg, zeroReg, '0', location());
      } else {
        return handleIInstruction(name, zeroReg, zeroReg, '1', location());
      }
    };
  var peg$f36 = function(name, rs, offset) { 
      if (isFirstPass) { return undefined; }
      return handleBPInstruction(name, rs, null, offset, location()); 
    };
  var peg$f37 = function(name, rs1, rs2, offset) { 
      if (isFirstPass) { return undefined; }
      return handleBPInstruction(name, rs1, rs2, offset, location()); 
    };
  var peg$f38 = function(rs) {
      if (isFirstPass) { return undefined; }
      return handleIInstruction('jalr', regEnc('1'), rs, '0', location(), true);
    };
  var peg$f39 = function(offset) {
      if (isFirstPass) { return undefined; }
      return handleJInstruction('jal', regEnc('1'), offset, location(), true);
    };
  var peg$f40 = function(rs) {
      if (isFirstPass) { return undefined; }
      return handleIInstruction('jalr', regEnc('0'), rs, '0', location(), true);
    };
  var peg$f41 = function(target) {
      if (isFirstPass) { return undefined; }
      return handleJInstruction('jal', regEnc('0'), target, location(), true);
    };
  var peg$f42 = function() {
      if (isFirstPass) { return undefined; }
      return handleIInstruction(
        'jalr', regEnc('0'), regEnc('1'), '0', location(), true
      );
    };
  var peg$f43 = function(name, offset) {
      if (isFirstPass){
        getInstMemPosition();
        return undefined;
      }
      const imm = offset["value"];
      const complementInstruction = handleUInstruction('auipc', regEnc('1'), shiftRightLogical(imm + 0x800, 12), location(), true); 
      const mainInstruction = handleIInstruction('jalr', regEnc('1'), regEnc('1'), applyBitMask(imm, 0xFFF), location(), true);
      return [complementInstruction, mainInstruction];
    };
  var peg$f44 = function(name, offset) {
      if (isFirstPass){
        getInstMemPosition();
        return undefined;
      }
      const imm = offset["value"];
      const complementInstruction = handleUInstruction('auipc', regEnc('6'), shiftRightLogical(imm + 0x800, 12), location(), true);
      const mainInstruction = handleIInstruction('jalr', regEnc('0'), regEnc('6'), applyBitMask(imm, 0xFFF), location(), true);
      return [complementInstruction, mainInstruction];
    };
  var peg$f45 = function(rd, rs) { 
      if (isFirstPass){ return undefined; }
      return handleIInstruction('addi', rd, rs, '0', location(), true); 
    };
  var peg$f46 = function() { 
      if (isFirstPass) { return undefined; }
      return handleIInstruction(
        'addi', regEnc('0'), regEnc('0'), '0', location(), true
      ); 
    };
  var peg$f47 = function(rd, rs) {
      if (isFirstPass) { return undefined; }
      return handleIInstruction('xori', rd, rs, '-1', location(), true); 
    };
  var peg$f48 = function(rd, rs) {
      if (isFirstPass) { return undefined; }
      return handleRInstruction('sub', rd, regEnc('0'), rs, location(), true); 
    };
  var peg$f49 = function(rd, rs) {
      if (isFirstPass) { return undefined; }
      return handleIInstruction('sltiu', rd, rs, '1', location(), true); 
    };
  var peg$f50 = function(rd, rs) {
      if (isFirstPass) { return undefined; }
      return handleRInstruction('sltu', rd, regEnc('0'), rs, location(), true);
    };
  var peg$f51 = function(rd, rs) { 
      if (isFirstPass) { return undefined; }
      return handleRInstruction('slt', rd, rs, regEnc('0'), location(), true); 
    };
  var peg$f52 = function(rd, rs) { 
      if (isFirstPass) { return undefined; }
      return handleRInstruction('slt', rd, regEnc('0'), rs, location(), true); 
    };
  var peg$f53 = function(rd, rs1, rs2) {
      if (isFirstPass) { return undefined; }
      return handleRInstruction('slt', rd, rs2, rs1, location(), true);
    };
  var peg$f54 = function(rd, symbol) {
      if (isFirstPass){
        verifySymbol(symbol);
        return undefined;
      }
      const imm = symbol["value"];
      let complementInstruction;
      if (isDoubleInst(symbol)){ complementInstruction = handleUInstruction('auipc', rd, shiftRightLogical(imm, 12), location(), true); }
      const mainInstruction = handleIInstruction('addi', rd, rd, applyBitMask(imm, 0xFFF), location(), true);
      return [complementInstruction, mainInstruction];
    };
  var peg$f55 = function(rd, symbol) {
      if (isFirstPass){
        verifySymbol(symbol);
        return undefined;
      }
      const imm = symbol["value"];
      let complementInstruction;
      if (isDoubleInst(symbol)){ complementInstruction = handleUInstruction('lui', rd, shiftRightLogical(imm, 12), location(), true); }
      const mainInstruction = handleIInstruction('addi', rd, regEnc('0'), applyBitMask(imm, 0xFFF), location(), true);
      return [complementInstruction, mainInstruction];
    };
  var peg$f56 = function(name, rd, symbol) { 
    if (isFirstPass){
      verifySymbol(symbol);
      return undefined;
    }
    const imm = symbol["value"];
    let complementInstruction;
    if (isDoubleInst(symbol)){ complementInstruction = handleUInstruction('auipc', rd, shiftRightLogical(imm, 12), location(), true); }
    const mainInstruction = handleIInstruction(name, rd, rd, applyBitMask(imm, 0xFFF), location(), true);
    return [complementInstruction, mainInstruction];
  };
  var peg$f57 = function(name, rd, symbol, rt) { 
    if (isFirstPass){
      verifySymbol(symbol);
      return undefined;
    }
    const imm = symbol["value"];
    let complementInstruction;
    if (isDoubleInst(symbol)){ complementInstruction = handleUInstruction('auipc', rt, shiftRightLogical(imm, 12), location(), true); }
    const mainInstruction = handleSInstruction(name, rd, applyBitMask(imm, 0xFFF), rt, location(), true);
    return [complementInstruction, mainInstruction];
  };
  var peg$f58 = function(val) {
      const v = getInt(val);
        if (isImm12(v))
          return v;
        return error("Expecting 12 bit representable value [-2048,2047]. Got " + val, location());
  };
  var peg$f59 = function(val) {
      const v = getInt(val);
        if (isImm13(v))
          return v;
        return error("Expecting 13 bit representable value [-4096, 4095]. Got " + val, location());
  };
  var peg$f60 = function(val) {
      const v = getInt(val);
      if (isImm21(v))
        return v;
      error("Expecting 21 bit representable value [-1048576, 1048575]. Got " + val, location());
  };
  var peg$f61 = function(val) {
      const v = getInt(val);
        if (isImm32(v))
          return v;
        return error("Expecting 32 bit representable value [0, 4294967295]. Got " + val, location());
  };
  var peg$f62 = function(imm) { return imm; };
  var peg$f63 = function(lbl) { 
    if (isFirstPass) { return undefined; }
    let value = getPosLabel(lbl["name"])
    if (!value){
      value = getConstantValue(lbl["name"]);
    }
    if (value && isImm21(value)) {
        return value;
    }
    return error("Expecting 21 bit representable value [-1048576, 1048575]. Got " + lbl.name); 
  };
  var peg$f64 = function(val) {
    const v = getInt(val);
    if (!isImm32(v)) { return error("Expecting 32 bit representable value [-2147483648, 2147483647]. Got " + val); }
    return {"value": v, "double": !isImm12(v)}; 
    
  };
  var peg$f65 = function(imm) { return imm; };
  var peg$f66 = function(lbl) {
    if (isFirstPass) { return {}; }

    const value = getIdentifierValue(lbl.name);
  
    if (!value){
      return error(`Identifier name is not valid: ${lbl.name}`);
      
    }
    return {"value": value, "double": !isImm12(value)};
  };
  var peg$f67 = function(imm) { return imm; };
  var peg$f68 = function(address) {
    if (isFirstPass) { return {}; }
    const value = getDirFromData(address["name"])
    if (!value){
      return error("Expecting a valid Symbol or Direction name. Got " + address.name)
    }
    return {"value": value, "double": !isImm12(value)};
  };
  var peg$f69 = function(name) {
    const value = getConstantValue(name.name);
    if (value && isImm32(value)) { return value; }
    else { return error("Constant value most be 32 bit representable value. Got " + name.name); }
  };
  var peg$f70 = function(name) {
    const value = getConstantValue(name.name);
    if (value && isImm12(value)) { return value; }
    else { return error("Constant value most be 12 bit representable value. Got " + name.name); }
  };
  var peg$f71 = function(name) {
    const value = getConstantValue(name.name);
    if (value && isImm13(value)) { return value; }
    else { return error("Constant value most be 13 bit representable value. Got " + name.name); }
  };
  var peg$f72 = function(name) {
    const value = getConstantValue(name.name);
    if (value && isImm21(value)) { return value; }
    else { return error("Constant value most be 21 bit representable value. Got " + name.name); }
  };
  var peg$f73 = function(name) {
    let value = getDirFromData(name.name);
    if (value === undefined){
      value = getConstantValue(name.name);
    }
    if (value && !isImm12(value)) { return error("Constant value most be 32 bit representable value. Got " + name.name); }
    return value;
  };
  var peg$f74 = function(name) {
    let value = getDirFromData(name.name);
    if (value === undefined){
      value = getConstantValue(name.name);
    }
    if (value && !isImm32(value)) { return error("Constant value most be 32 bit representable value. Got " + name.name); }
    const data = {
      value: value,
      double: !isImm12
    }
    return data;
  };
  var peg$f75 = function(imm) { return imm; };
  var peg$f76 = function(lbl) {
    if (isFirstPass) { return undefined; }
    const value = getPosLabel(lbl["name"]);
    if (value && isImm13(value)) {
        return value;
    }
    return error("Expecting 13 bit representable value [-4096, 4095] (Label, Constant or Imm). Got " + lbl.name, location());
  };
  var peg$f77 = function(imm) { return imm; };
  var peg$f78 = function(lbl) {
    if (isFirstPass) { return undefined; }
    const value = getIdentifierValue(lbl.name);
    if (isImm13(value)) {
        return value;
    }
    return error("Expecting 13 bit representable value [-4096, 4095] (Label, Constant or Imm). Got " + lbl.name, location());
  };
  var peg$f79 = function(lbl) {
    /*
        %lo(symbol): The low 12 bits of absolute address for symbol.
    */
    if (isFirstPass) { return undefined; }
    const value = getPosLabel(lbl["name"]);
    const value13 = applyBitMask(value, (1 << 13) - 1)
    console.log("lo(symbol): ", value, value13,location());
    return value13;
  };
  var peg$f80 = function(lbl) {
    if (isFirstPass) { return undefined; }
    const value = getPosLabel(lbl["name"]);
    const value13 = applyBitMask((value - location()*4), 0xFFF);
    console.log("pcrel_lo: ", value13);
    return value13;
  };
  var peg$f81 = function(symbol) {
    if (isFirstPass) { return undefined; }
    const value = symbol["value"]
    const value20 = shiftRightLogical((value - location() * 4 + 0x800), 12);
    console.log("pcrel_hi: ", value20);
    return value20;
  };
  var peg$f82 = function(lbl) {
    if (isFirstPass) { return undefined; }
    const value = getPosLabel(lbl["name"]);
    const mask = ((1 << 20) - 1) << 12;
    const valueMask = applyBitMask(value, mask);
    const value20 = shiftRightLogical(valueMask, 12);
    console.log("hi(symbol): ", value, value20, location());
    return value20;
  };
  var peg$f83 = function(reg) {
    var r = reg;
    r["regenc"] = reg["regeq"].slice(1);
    return r;
  };
  var peg$f84 = function(reg) {
    const v = reg.slice(1);
    return {"regname": reg, "regeq": reg, "regenc":v};
  };
  var peg$f85 = function(reg) {return {"regname": reg, "regeq": "x0"}; };
  var peg$f86 = function(reg) {return {"regname": reg, "regeq": "x1"}; };
  var peg$f87 = function(reg) {return {"regname": reg, "regeq": "x2"}; };
  var peg$f88 = function(reg) {return {"regname": reg, "regeq": "x3"}; };
  var peg$f89 = function(reg) {return {"regname": reg, "regeq": "x4"}; };
  var peg$f90 = function(reg) {return {"regname": reg, "regeq": "x5"}; };
  var peg$f91 = function(reg) {return {"regname": reg, "regeq": "x6"}; };
  var peg$f92 = function(reg) {return {"regname": reg, "regeq": "x7"}; };
  var peg$f93 = function(reg) {return {"regname": reg, "regeq": "x28"};};
  var peg$f94 = function(reg) {return {"regname": reg, "regeq": "x29"};};
  var peg$f95 = function(reg) {return {"regname": reg, "regeq": "x30"};};
  var peg$f96 = function(reg) {return {"regname": reg, "regeq": "x31"};};
  var peg$f97 = function(reg) {return {"regname": reg, "regeq": "x8"}; };
  var peg$f98 = function(reg) {return {"regname": reg, "regeq": "x8"}; };
  var peg$f99 = function(reg) {return {"regname": reg, "regeq": "x9"}; };
  var peg$f100 = function(reg) {return {"regname": reg, "regeq": "x18"};};
  var peg$f101 = function(reg) {return {"regname": reg, "regeq": "x19"};};
  var peg$f102 = function(reg) {return {"regname": reg, "regeq": "x20"};};
  var peg$f103 = function(reg) {return {"regname": reg, "regeq": "x21"};};
  var peg$f104 = function(reg) {return {"regname": reg, "regeq": "x22"};};
  var peg$f105 = function(reg) {return {"regname": reg, "regeq": "x23"};};
  var peg$f106 = function(reg) {return {"regname": reg, "regeq": "x24"};};
  var peg$f107 = function(reg) {return {"regname": reg, "regeq": "x25"};};
  var peg$f108 = function(reg) {return {"regname": reg, "regeq": "x26"};};
  var peg$f109 = function(reg) {return {"regname": reg, "regeq": "x27"};};
  var peg$f110 = function(reg) {return {"regname": reg, "regeq": "x10"};};
  var peg$f111 = function(reg) {return {"regname": reg, "regeq": "x11"};};
  var peg$f112 = function(reg) {return {"regname": reg, "regeq": "x12"};};
  var peg$f113 = function(reg) {return {"regname": reg, "regeq": "x13"};};
  var peg$f114 = function(reg) {return {"regname": reg, "regeq": "x14"};};
  var peg$f115 = function(reg) {return {"regname": reg, "regeq": "x15"};};
  var peg$f116 = function(reg) {return {"regname": reg, "regeq": "x16"};};
  var peg$f117 = function(reg) {return {"regname": reg, "regeq": "x17"};};
  var peg$f118 = function(digits) { return parseInt(digits.join(""), 16); };
  var peg$f119 = function(digits) { return parseInt(digits.join(""), 16); };
  var peg$f120 = function() { return parseInt(text(), 10); };
  var peg$f121 = function(name) { return name; };
  var peg$f122 = function(name) { return { type: "IdentifierName", name: text() }; };
  var peg$f123 = function(name) { return { type: "IdentifierName", name: text() }; };
  var peg$f124 = function() { return text(); };
  var peg$f125 = function() { return text().replace(/"/g, ""); };
  var peg$f126 = function() { return "\"" };
  var peg$f127 = function() { return "\n" };
  var peg$f128 = function() { return "\t" };
  var peg$f129 = function() { return "\\" };
  var peg$f130 = function() {
    return text();
  };
  var peg$f131 = function() {
    return "";
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0;

    s0 = peg$parseProgram();

    return s0;
  }

  function peg$parseProgram() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSourceElements();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseSourceElements() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseSourceElement();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse__();
      s6 = peg$parseSourceElement();
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse__();
        s6 = peg$parseSourceElement();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceElement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDirective();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLabelDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOS();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseInstruction();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEOS();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.length > peg$currPos) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (input.length > peg$currPos) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
            }
            peg$savedPos = s0;
            s0 = peg$f5(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLabelDeclaration() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseAlignDirectives();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseInteger();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s1, s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifierName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c0;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseAlignDirectivesString();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseString();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s1, s5, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDirective() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseequToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseImm32();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesectionToken();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parse_();
      s3 = peg$parsetextToken();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesectionToken();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parse_();
        s3 = peg$parsedataToken();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseDataDeclaration();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parse__();
            s9 = peg$parseDataDeclaration();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parse__();
              s9 = peg$parseDataDeclaration();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            peg$savedPos = s0;
            s0 = peg$f11(s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesectionToken();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          s2 = peg$parse_();
          s3 = peg$parserodataToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            s5 = peg$parseDataDeclaration();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parse__();
              s9 = peg$parseDataDeclaration();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parse__();
                s9 = peg$parseDataDeclaration();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              peg$savedPos = s0;
              s0 = peg$f12(s5, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesectionToken();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = peg$parse_();
            s3 = peg$parsebssToken();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              s5 = peg$parseDataDeclaration();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parse__();
                s9 = peg$parseDataDeclaration();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parse__();
                  s9 = peg$parseDataDeclaration();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                peg$savedPos = s0;
                s0 = peg$f13(s5, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseglobalToken();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseIdentifier();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f14(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsegloblToken();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseIdentifier();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f15(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseInstruction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseRInstruction();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIInstruction();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f17(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseJInstruction();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f18(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLInstruction();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f19(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSInstruction();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f20(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBInstruction();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f21(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseUInstruction();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f22(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseEInstruction();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f23(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsePseudoInstruction();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f24(s1);
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseRInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseRInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRegisterName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse___();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRegisterName();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f25(s1, s3, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseIInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRegisterName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse___();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseOperandKind12();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f26(s1, s3, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseLInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLoadInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLIOperandKind12();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s7 = peg$c1;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseRegisterName();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s11 = peg$c2;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27(s1, s3, s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLoadUInstName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegisterName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse___();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLIOperandKind12();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 40) {
                s7 = peg$c1;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                s9 = peg$parseRegisterName();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s11 = peg$c2;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f28(s1, s3, s5, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseSInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseStoreInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSOperandKind12();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s7 = peg$c1;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseRegisterName();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s11 = peg$c2;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29(s1, s3, s5, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseBInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBranchInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRegisterName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse___();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseBTarget();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f30(s1, s3, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseJInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsejalrToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRegisterName();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse___();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseOperandKindJALR();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f31(s1, s3, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsejalrToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegisterName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse___();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOperandKindJALR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 40) {
                s7 = peg$c1;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                s9 = peg$parseRegisterName();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s11 = peg$c2;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f32(s1, s3, s5, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsejalToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegisterName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse___();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseJTarget();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f33(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseUInstruction() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseUpperImmInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOperandKind21();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f34(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseEInstruction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseecallToken();
    if (s1 === peg$FAILED) {
      s1 = peg$parseebreakToken();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parsePseudoInstruction() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseBPInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseJPInstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMiscInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLoadPInstruction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStorePInstruction();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseBPInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBPZInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseBTarget();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f36(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBPInstName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRegisterName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse___();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRegisterName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse___();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseBTarget();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37(s1, s3, s5, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseJPInstruction() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsejalrToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsejalToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseJTarget();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsejrToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegisterName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f40(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsejToken();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseJTarget();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f41(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseretToken();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f42();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecallToken();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseOffset();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f43(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsetailToken();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseOffset();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f44(s1, s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseMiscInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemvToken();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRegisterName();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f45(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenopToken();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f46();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenotToken();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseRegisterName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse___();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRegisterName();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f47(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenegToken();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseRegisterName();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse___();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseRegisterName();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f48(s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseseqzToken();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseRegisterName();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse___();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseRegisterName();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f49(s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsesnezToken();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseRegisterName();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse___();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseRegisterName();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f50(s3, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsesltzToken();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseRegisterName();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse___();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseRegisterName();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f51(s3, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsesgtzToken();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseRegisterName();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse___();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseRegisterName();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f52(s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsesgtToken();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$parseRegisterName();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse___();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseRegisterName();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parse___();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseRegisterName();
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f53(s3, s5, s7);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parselaToken();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        s3 = peg$parseRegisterName();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse___();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseLaOffset();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f54(s3, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseliToken();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          s3 = peg$parseRegisterName();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse___();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseOperandKindSymbol();
                              if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f55(s3, s5);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseLoadPInstruction() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLoadInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLIPOperand();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f56(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseStorePInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseStoreInstName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRegisterName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOperandKindSymbol();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse___();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRegisterName();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f57(s1, s3, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseImm12() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f58(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseImm13() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f59(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseImm21() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f60(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseImm32() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f61(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseJTarget() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseImm21();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f62(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f63(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseSymbol() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f64(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseOffset() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSymbol();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f65(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f66(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseLaOffset() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSymbol();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f67(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f68(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseConstantName32() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f69(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseConstantName12() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f70(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseConstantName13() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f71(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseConstantName21() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f72(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseLIOperandKind12() {
    var s0;

    s0 = peg$parseImm12();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifierLow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAddress12();
      }
    }

    return s0;
  }

  function peg$parseSOperandKind12() {
    var s0;

    s0 = peg$parseImm12();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifierLow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAddress12();
      }
    }

    return s0;
  }

  function peg$parseOperandKind12() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseImm12();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifierLow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseConstantName12();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseOperandKindJALR() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseImm13();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseConstantName13();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseOperandKind21() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseImm21();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifierHigh();
      if (s0 === peg$FAILED) {
        s0 = peg$parseConstantName21();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parseOperandKindSymbol() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseSymbol();
    if (s0 === peg$FAILED) {
      s0 = peg$parseConstantName32();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseLIPOperand() {
    var s0;

    s0 = peg$parseSymbol();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAddress();
    }

    return s0;
  }

  function peg$parseAddress12() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f73(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAddress() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBTarget() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseImm13();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f76(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseJALRTarget() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseImm13();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f78(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseAsmModifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseAsmModifierLow();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAsmModifierHigh();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseAsmModifierLow() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s3 = peg$c4;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f79(s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 8) === peg$c5) {
          s3 = peg$c5;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseIdentifier();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f80(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAsmModifierHigh() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 8) === peg$c6) {
        s3 = peg$c6;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSymbol();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c2;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f81(s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c7) {
          s3 = peg$c7;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseIdentifier();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s9 = peg$c2;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f82(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseJumpInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsejalToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsejrToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsejToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseretToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecallToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetailToken();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseUpperImmInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseluiToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseauipcToken();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseBranchInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsebeqToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebneToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebltuToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebgeuToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebltToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebgeToken();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseBPZInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsebeqzToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebnezToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseblezToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebgezToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebltzToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebgtzToken();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseBPInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsebgtuToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebleuToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebgtToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebleToken();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseMiscInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsenopToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseliToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemvToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenotToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenegToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parseseqzToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesnezToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesltzToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesgtzToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsesgtToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parselaToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseliToken();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseStoreInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsesbToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseshToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseswToken();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseLoadInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parselbToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parselhToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parselwToken();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseLoadUInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parselbuToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parselhuToken();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseRInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseaddToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesubToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsexorToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseorToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parseandToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesllToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesrlToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesraToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesltuToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsesltToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsemulhToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsemulsuToken();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsemuluToken();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsemulToken();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsedivuToken();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsedivToken();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseremuToken();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseremToken();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseIInstName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseaddiToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsexoriToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoriToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseandiToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parseslliToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesrliToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesraiToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesltiToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesltiuToken();
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseRegisterName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseABIRegister();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f83(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRegister();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f84(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseRegister() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsex10Token();
    if (s0 === peg$FAILED) {
      s0 = peg$parsex11Token();
      if (s0 === peg$FAILED) {
        s0 = peg$parsex12Token();
        if (s0 === peg$FAILED) {
          s0 = peg$parsex13Token();
          if (s0 === peg$FAILED) {
            s0 = peg$parsex14Token();
            if (s0 === peg$FAILED) {
              s0 = peg$parsex15Token();
              if (s0 === peg$FAILED) {
                s0 = peg$parsex16Token();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsex17Token();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsex18Token();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsex19Token();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsex20Token();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsex21Token();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsex22Token();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsex23Token();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsex24Token();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsex25Token();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsex26Token();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsex27Token();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsex28Token();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsex29Token();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsex30Token();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsex31Token();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsex0Token();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsex1Token();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsex2Token();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsex3Token();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsex4Token();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsex5Token();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsex6Token();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsex7Token();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsex8Token();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsex9Token();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseABIRegister() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseZEROToken();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRAToken();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f86(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSPToken();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f87(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseGPToken();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f88(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTPToken();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f89(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseT0Token();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f90(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseT1Token();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f91(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseT2Token();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f92(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseT3Token();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f93(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseT4Token();
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f94(s1);
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseT5Token();
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f95(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseT6Token();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f96(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseS0Token();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f97(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseFPToken();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f98(s1);
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseS1Token();
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f99(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseS2Token();
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f100(s1);
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseS3Token();
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f101(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseS4Token();
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f102(s1);
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseS5Token();
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$f103(s1);
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseS6Token();
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f104(s1);
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseS7Token();
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$f105(s1);
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseS8Token();
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$f106(s1);
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseS9Token();
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$f107(s1);
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseS10Token();
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$f108(s1);
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseS11Token();
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$f109(s1);
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseA0Token();
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$f110(s1);
                                                      }
                                                      s0 = s1;
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseA1Token();
                                                        if (s1 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$f111(s1);
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseA2Token();
                                                          if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$f112(s1);
                                                          }
                                                          s0 = s1;
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseA3Token();
                                                            if (s1 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$f113(s1);
                                                            }
                                                            s0 = s1;
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseA4Token();
                                                              if (s1 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$f114(s1);
                                                              }
                                                              s0 = s1;
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parseA5Token();
                                                                if (s1 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s1 = peg$f115(s1);
                                                                }
                                                                s0 = s1;
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parseA6Token();
                                                                  if (s1 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$f116(s1);
                                                                  }
                                                                  s0 = s1;
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parseA7Token();
                                                                    if (s1 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$f117(s1);
                                                                    }
                                                                    s0 = s1;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseaddToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c8) {
      s0 = peg$c8;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parsesubToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parsexorToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseorToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c11) {
      s0 = peg$c11;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseandToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parsesllToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c13) {
      s0 = peg$c13;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parsesrlToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parsesraToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c15) {
      s0 = peg$c15;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parsesltToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

    return s0;
  }

  function peg$parsesltuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parsemulToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

    return s0;
  }

  function peg$parsemulhToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parsemulsuToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parsemuluToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parsedivToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parsedivuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c23) {
      s0 = peg$c23;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parseremToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseremuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c25) {
      s0 = peg$c25;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parseaddiToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parsexoriToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c27) {
      s0 = peg$c27;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parseoriToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c28) {
      s0 = peg$c28;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseandiToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseslliToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c30) {
      s0 = peg$c30;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parsesrliToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c31) {
      s0 = peg$c31;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parsesraiToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c32) {
      s0 = peg$c32;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parsesltiToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c33) {
      s0 = peg$c33;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parsesltiuToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c34) {
      s0 = peg$c34;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parselbToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parselhToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parselwToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c37) {
      s0 = peg$c37;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parselbuToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c38) {
      s0 = peg$c38;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }

    return s0;
  }

  function peg$parselhuToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c39) {
      s0 = peg$c39;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parsesbToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

    return s0;
  }

  function peg$parseshToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }

    return s0;
  }

  function peg$parseswToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parsebeqToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c43) {
      s0 = peg$c43;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parsebneToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parsebltToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c45) {
      s0 = peg$c45;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }

    return s0;
  }

  function peg$parsebgeToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c46) {
      s0 = peg$c46;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }

    return s0;
  }

  function peg$parsebltuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c47) {
      s0 = peg$c47;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parsebgeuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c48) {
      s0 = peg$c48;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parsejalrToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c49) {
      s0 = peg$c49;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parsejalToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c50) {
      s0 = peg$c50;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseluiToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c51) {
      s0 = peg$c51;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseauipcToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c52) {
      s0 = peg$c52;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseecallToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c53) {
      s0 = peg$c53;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseebreakToken() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c54) {
      s0 = peg$c54;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parsebeqzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c55) {
      s0 = peg$c55;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parsebnezToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c56) {
      s0 = peg$c56;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }

    return s0;
  }

  function peg$parseblezToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }

    return s0;
  }

  function peg$parsebgezToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c58) {
      s0 = peg$c58;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parsebltzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parsebgtzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c60) {
      s0 = peg$c60;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parsebgtToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c61) {
      s0 = peg$c61;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }

    return s0;
  }

  function peg$parsebleToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c62) {
      s0 = peg$c62;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parsebgtuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c63) {
      s0 = peg$c63;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parsebleuToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c64) {
      s0 = peg$c64;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parsejrToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parsejToken() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 106) {
      s0 = peg$c66;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }

    return s0;
  }

  function peg$parseretToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c67) {
      s0 = peg$c67;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parsecallToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parsetailToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c69) {
      s0 = peg$c69;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsenopToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c70) {
      s0 = peg$c70;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parseliToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c71) {
      s0 = peg$c71;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parsemvToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c72) {
      s0 = peg$c72;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parsenotToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c73) {
      s0 = peg$c73;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parsenegToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c74) {
      s0 = peg$c74;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }

    return s0;
  }

  function peg$parseseqzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c75) {
      s0 = peg$c75;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parsesnezToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c76) {
      s0 = peg$c76;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parsesltzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c77) {
      s0 = peg$c77;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parsesgtzToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c78) {
      s0 = peg$c78;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parsesgtToken() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c79) {
      s0 = peg$c79;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }

    return s0;
  }

  function peg$parselaToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c80) {
      s0 = peg$c80;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }

    return s0;
  }

  function peg$parsex0Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c81) {
      s0 = peg$c81;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parsex1Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c82) {
      s0 = peg$c82;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

    return s0;
  }

  function peg$parsex2Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c83) {
      s0 = peg$c83;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parsex3Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }

    return s0;
  }

  function peg$parsex4Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parsex5Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c86) {
      s0 = peg$c86;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parsex6Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c87) {
      s0 = peg$c87;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parsex7Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c88) {
      s0 = peg$c88;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }

    return s0;
  }

  function peg$parsex8Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c89) {
      s0 = peg$c89;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    return s0;
  }

  function peg$parsex9Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c90) {
      s0 = peg$c90;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }

    return s0;
  }

  function peg$parsex10Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c91) {
      s0 = peg$c91;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parsex11Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c92) {
      s0 = peg$c92;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }

    return s0;
  }

  function peg$parsex12Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c93) {
      s0 = peg$c93;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }

    return s0;
  }

  function peg$parsex13Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c94) {
      s0 = peg$c94;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }

    return s0;
  }

  function peg$parsex14Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c95) {
      s0 = peg$c95;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    return s0;
  }

  function peg$parsex15Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c96) {
      s0 = peg$c96;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }

    return s0;
  }

  function peg$parsex16Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c97) {
      s0 = peg$c97;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }

  function peg$parsex17Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c98) {
      s0 = peg$c98;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }

    return s0;
  }

  function peg$parsex18Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c99) {
      s0 = peg$c99;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }

    return s0;
  }

  function peg$parsex19Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c100) {
      s0 = peg$c100;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }

    return s0;
  }

  function peg$parsex20Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c101) {
      s0 = peg$c101;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parsex21Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c102) {
      s0 = peg$c102;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }

    return s0;
  }

  function peg$parsex22Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c103) {
      s0 = peg$c103;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }

    return s0;
  }

  function peg$parsex23Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c104) {
      s0 = peg$c104;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parsex24Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c105) {
      s0 = peg$c105;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parsex25Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c106) {
      s0 = peg$c106;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }

    return s0;
  }

  function peg$parsex26Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c107) {
      s0 = peg$c107;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parsex27Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c108) {
      s0 = peg$c108;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parsex28Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parsex29Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c110) {
      s0 = peg$c110;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parsex30Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c111) {
      s0 = peg$c111;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parsex31Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c112) {
      s0 = peg$c112;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }

    return s0;
  }

  function peg$parseZEROToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c113) {
      s0 = peg$c113;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }

    return s0;
  }

  function peg$parseRAToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c114) {
      s0 = peg$c114;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }

    return s0;
  }

  function peg$parseSPToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c115) {
      s0 = peg$c115;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }

    return s0;
  }

  function peg$parseGPToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c116) {
      s0 = peg$c116;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parseTPToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseT0Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c118) {
      s0 = peg$c118;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }

    return s0;
  }

  function peg$parseT1Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c119) {
      s0 = peg$c119;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }

    return s0;
  }

  function peg$parseT2Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c120) {
      s0 = peg$c120;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }

    return s0;
  }

  function peg$parseT3Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c121) {
      s0 = peg$c121;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }

    return s0;
  }

  function peg$parseT4Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c122) {
      s0 = peg$c122;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseT5Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c123) {
      s0 = peg$c123;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseT6Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseS0Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c125) {
      s0 = peg$c125;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }

    return s0;
  }

  function peg$parseFPToken() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c126) {
      s0 = peg$c126;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }

    return s0;
  }

  function peg$parseS1Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c127) {
      s0 = peg$c127;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }

    return s0;
  }

  function peg$parseS2Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }

    return s0;
  }

  function peg$parseS3Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c129) {
      s0 = peg$c129;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }

    return s0;
  }

  function peg$parseS4Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c130) {
      s0 = peg$c130;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }

    return s0;
  }

  function peg$parseS5Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c131) {
      s0 = peg$c131;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseS6Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c132) {
      s0 = peg$c132;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }

    return s0;
  }

  function peg$parseS7Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c133) {
      s0 = peg$c133;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }

    return s0;
  }

  function peg$parseS8Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c134) {
      s0 = peg$c134;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseS9Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c135) {
      s0 = peg$c135;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }

    return s0;
  }

  function peg$parseS10Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c136) {
      s0 = peg$c136;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }

    return s0;
  }

  function peg$parseS11Token() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c137) {
      s0 = peg$c137;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parseA0Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

    return s0;
  }

  function peg$parseA1Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c139) {
      s0 = peg$c139;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }

    return s0;
  }

  function peg$parseA2Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

    return s0;
  }

  function peg$parseA3Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c141) {
      s0 = peg$c141;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }

    return s0;
  }

  function peg$parseA4Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c142) {
      s0 = peg$c142;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }

    return s0;
  }

  function peg$parseA5Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c143) {
      s0 = peg$c143;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }

    return s0;
  }

  function peg$parseA6Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c144) {
      s0 = peg$c144;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }

    return s0;
  }

  function peg$parseA7Token() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c145) {
      s0 = peg$c145;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e193); }
    }

    return s0;
  }

  function peg$parseDirectiveName() {
    var s0;

    s0 = peg$parseequToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesectionToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetextToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedataToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parserodataToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsebssToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecommonToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecommToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseAlignDirectives();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseAlignDirectivesString();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseglobalToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsegloblToken();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAlignDirectivesString() {
    var s0;

    s0 = peg$parsestringToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseascizToken();
    }

    return s0;
  }

  function peg$parseAlignDirectives() {
    var s0;

    s0 = peg$parsetwoByteToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefourByteToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehalfToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewordToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebyteToken();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseascizToken() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c146) {
      s0 = peg$c146;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }

    return s0;
  }

  function peg$parseequToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c147) {
      s0 = peg$c147;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }

    return s0;
  }

  function peg$parsesectionToken() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c148) {
      s0 = peg$c148;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }

    return s0;
  }

  function peg$parsetextToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }

    return s0;
  }

  function peg$parsedataToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c150) {
      s0 = peg$c150;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }

    return s0;
  }

  function peg$parserodataToken() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c151) {
      s0 = peg$c151;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }

    return s0;
  }

  function peg$parsebssToken() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c152) {
      s0 = peg$c152;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }

    return s0;
  }

  function peg$parsecommToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c153) {
      s0 = peg$c153;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }

    return s0;
  }

  function peg$parsecommonToken() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c154) {
      s0 = peg$c154;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parsetwoByteToken() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c155) {
      s0 = peg$c155;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }

    return s0;
  }

  function peg$parsefourByteToken() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c156) {
      s0 = peg$c156;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parsehalfToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c157) {
      s0 = peg$c157;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }

    return s0;
  }

  function peg$parsewordToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c158) {
      s0 = peg$c158;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }

    return s0;
  }

  function peg$parsebyteToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c159) {
      s0 = peg$c159;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parsestringToken() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c160) {
      s0 = peg$c160;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  function peg$parsezeroDToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c161) {
      s0 = peg$c161;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }

    return s0;
  }

  function peg$parseglobalToken() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c162) {
      s0 = peg$c162;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }

    return s0;
  }

  function peg$parsegloblToken() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c163) {
      s0 = peg$c163;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c164) {
      s2 = peg$c164;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e214); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r0.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e214); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f118(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c165) {
        s2 = peg$c165;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e215); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r0.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e214); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r0.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e214); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = input.charAt(peg$currPos);
        if (peg$r1.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e216); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r2.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e217); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r2.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e217); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f120();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }

    return s0;
  }

  function peg$parseReservedWord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseRegisterName();
    if (s1 === peg$FAILED) {
      s1 = peg$parseRInstName();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIInstName();
        if (s1 === peg$FAILED) {
          s1 = peg$parseLoadInstName();
          if (s1 === peg$FAILED) {
            s1 = peg$parseStoreInstName();
            if (s1 === peg$FAILED) {
              s1 = peg$parseBranchInstName();
              if (s1 === peg$FAILED) {
                s1 = peg$parseUpperImmInstName();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseJumpInstName();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseBPInstName();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseBPZInstName();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseMiscInstName();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseDirectiveName();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierChar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedWord();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifierName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f121(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifierName() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifierString();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r3.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e219); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = input.charAt(peg$currPos);
          if (peg$r3.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e219); }
          }
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f122(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifierString();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f123(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e218); }
    }

    return s0;
  }

  function peg$parseIdentifierString() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e220); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIdentifierChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseIdentifierChar();
      }
      peg$savedPos = s0;
      s0 = peg$f124();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifierChar() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c166;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseStringChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseStringChar();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c166;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e222); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f125();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringChar() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c167) {
      s1 = peg$c167;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e223); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f126();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c168) {
        s1 = peg$c168;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e224); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f127();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c169) {
          s1 = peg$c169;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e225); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f128();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c170) {
            s1 = peg$c170;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e226); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f129();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = input.charAt(peg$currPos);
            if (peg$r6.test(s2)) {
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e227); }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = undefined;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseQuotedString() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c166;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s5 = peg$c166;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e222); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
          s5 = peg$c166;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e222); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c166;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e222); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f130();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLineTerminatorSequence();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
    }

    return s0;
  }

  function peg$parseEOS() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseComment();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseLineTerminatorSequence();
    if (s3 !== peg$FAILED) {
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c171;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e229); }
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$parseEOF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parse__();
        }
      }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f131();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }

    return s0;
  }

  function peg$parseSourceCharacter() {
    var s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c172;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c173) {
        s0 = peg$c173;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e234); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c174;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e235); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }

    return s0;
  }

  function peg$parseLineTerminator() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }

    return s0;
  }

  function peg$parse___() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c175;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWhiteSpace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
    }

    return s0;
  }

  function peg$parseWhiteSpace() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r9.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }

    return s0;
  }


  counters = options.counters;
  instcounter = counters.instcounter;
  instCountData = counters.instCountData;
  const isFirstPass = options.firstPass;
  labelTable = options["symbols"];
  directives = options.directives;
  constantTable = options.constantTable;
  dataTable = options.dataTable;
  simOptions = options.options;
  if(isFirstPass) {
    console.log("First pass of the parser.");
  } else {
    console.log("Second pass of the parser.");
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["Start", "Instruction", "SourceElement"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
