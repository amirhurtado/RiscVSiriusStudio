html {
  --stroke-width: 3;
  --stroke-width-highlighted: 6;
  --font-size: 14px;
  --connection-font-size: 12px;
  --transition-time: 3s;
  --component-fill:                var(--vscode-editor-selectionHighlightBackground);
  --component-fill-hover:          var(--vscode-editor-selectionBackground);  
  --component-fill-inactive:       var(--vscode-editor-inactiveSelectionBackground);  
  --component-stroke:              var(--vscode-focusBorder);
  --component-text-color:          var(--vscode-descriptionForeground);
  --component-text-color-hover:    var(--vscode-errorForeground);
  --component-text-color-disabled: var(--vscode-editor-findMatchBackground);
  --connection-stroke:             var(--vscode-focusBorder);
  --connection-stroke-hover:       var(--vscode-errorForeground);
  --connection-stroke-disabled:    var(--vscode-input-border);
  --connection-text-color:         var(--vscode-descriptionForeground);
  --connection-text-color-hover:   var(--vscode-errorForeground);
  --connection-text-color-disabled:var(--vscode-editor-findMatchBackground);
  --signal-stroke:                 var(--vscode-focusBorder);
  --signal-stroke-hover:           var(--vscode-errorForeground);
  --signal-stroke-disabled:        var(--vscode-input-border);
  --signal-text-color:             var(--vscode-descriptionForeground);
  --signal-text-color-hover:       var(--vscode-errorForeground);
  --signal-text-color-disabled:    var(--vscode-editor-findMatchBackground);
  --tooltip-background:            var(--vscode-badge-background);
  --tooltip-border:                var(--vscode-editorHint-foreground);
  --tooltip-text-color-h1:         var(--vscode-focusBorder);
  --inst-type-text-color:          var(--vscode-editor-findMatchBackground);
  --inst-type-text-color-high:     var(--vscode-errorForeground);
  --inst-type-stroke:              var(--vscode-focusBorder);
  --inst-type-stroke-high:         var(--vscode-focusBorder);
  --inst-type-fill:                var(--vscode-editor-inactiveSelectionBackground);
  --inst-type-fill-high:           var(--vscode-editor-selectionBackground);
  --inst-val:                      var(--vscode-descriptionForeground);
  --inst-val-disabled:             var(--vscode-editor-findMatchBackground);
  --inst-val-highlighted:          var(--vscode-errorForeground);

  background-color: var(--vscode-editor-background);
}

svg {
  /* Scale the height of the image to fit the text editor without needing an
   * scroll bar
   */
  height: 98vh;
}

/**
 * The look of elements in the diagram is controlled by style properties. There
 * are three classes defined for each element:
 *
 * - Default: Styles the element in its normal state. That is, the element is
 *   present in the processing of current instruction.
 *
 * - Hover: The element is under the mouse pointer. In this state, additional
 *   information like tooltips and highlighting is presented.
 *
 * - Disabled: the element is not present in the current instruction processing.
 *   In this state all the mouse events must be turned off.
 *
 * There are also different types of elements:
 * - Components.
 * - Connections.
 * - Loggers.
 *
 * Each element has its own style rules. Take into account that those styles are
 * styles on html and svg elements so change them accordingly. The way the
 * elements appear in the document is handled by draw.io which is the
 * application used to produce the svg. 
 */

 /** Style for enabled components. 
  *
  * Most of the components are svg rectangles, however, special shapes like the
  * ALU are drawn as paths.
  **/
.component {
  rect {
    stroke-width: var(--stroke-width); 
    stroke: var(--component-stroke);
    fill: var(--component-fill);
    transition: stroke-width 3s;
  }
  path {
    stroke-width: var(--stroke-width);
    stroke: var(--component-stroke);
    fill: var(--component-fill);
    transition: stroke-width var(--transition-time);
  }
  div div div {
    color: var(--component-text-color) !important;
    font-size: var(--font-size) !important;
  }
}

/* Style for hovered components. */
.component:hover {
  rect {
    stroke-width: var(--stroke-width-highlighted);
    fill: var(--component-fill-hover);
  }
  path {
    stroke-width: var(--stroke-width-highlighted);
    fill: var(--component-fill-hover);
  }
  div div div {
    color: var(--component-text-color-hover) !important;
  }
}

 /* Style for disabled components. */
 .componentDisabled {
  rect {
    opacity: 0.3;
    fill: var(--component-fill-inactive);
    pointer-events: none;
  }

  path {
    opacity: 0.3;
    fill: var(--component-fill-inactive);
  }

  div div div {
    color: var(--component-text-color-disabled) !important;
    pointer-events: none !important;
  }
}

/**
 * Path style.
 *
 * Should be called path instead but that will conflict with all the other path
 * tags in the svg.
 */
 .connection {
  path {
    stroke-width: var(--stroke-width);
    stroke: var(--connection-stroke);
    transition: stroke-width var(--transition-time);
  }
  div div div{
    color: var(--component-text-color) !important;
    font-size: var(--connection-font-size) !important;
  }
}

.connection:hover {
  path {
    stroke-width: var(--stroke-width-highlighted);
    stroke: var(--connection-stroke-hover);
    animation: blinker var(--transition-time) linear infinite;
  }
  div div div {
    color: var(--connection-text-color-hover) !important;
    font-size: var(--connection-font-size) !important;
    animation: blinker var(--transition-time) linear infinite;
  }
}

.connectionDisabled {
  path {
    opacity: 0.5;
    stroke-width: var(--stroke-width);
    stroke: var(--connection-stroke-disabled);
    pointer-events: none;
  }
  div div div {
    color: var(--connection-text-color-disabled) !important;
  }
}

.muxPath {
  visibility: visible;
}

.muxPathDisabled {
  visibility: hidden ;
}


.signal {
  path {
    stroke-width: var(--stroke-width);
    stroke: var(--signal-stroke);
    fill: var(--signal-stroke);
  }
  div {
    color: var(--signal-text-color) !important;
  }
}

.signal:hover {
  path {
    stroke-width: var(--stroke-width-highlighted);
    stroke: var(--signal-stroke-hover);
    fill: var(--signal-stroke-hover);
    animation: blinker 1.5s linear infinite;
  }
  div {
    color: var(--signal-text-color-hover) !important;
  }
}

.signalDisabled {
  path {
      stroke-width: var(--stroke-width);
      stroke: var(--signal-stroke-disabled);
      fill: var(--signal-stroke-disabled);
      opacity: 0.3;
      pointer-events: none
    }
    
    div {
      color: var(--signal-text-color-disabled) !important;
    }
}

@keyframes blinker {
  25% {
    stroke-width: 4;
    opacity: 0.25;
  }
  50% {
    stroke-width: 5;
    opacity: 0.5;
  }
  75% {
    stroke-width: 6;
    opacity: 1;
  }
}

.inputText {
  div div div {
    color: var(--component-text-color) !important;
    /* pointer-events: auto; */
  }
}

.inputText:hover {
  div div div {
    /* pointer-events: auto; */
    color: var(--component-text-color-hover) !important;
    font-weight: 800;
  }
}

.inputTextDisabled {
  div div div {
    color: var(--component-text-color-disabled) !important;
    /* pointer-events: none !important; */
  }
}

.instruction {
  div div div {
    color: var(--inst-val) !important;
    font-size: 1.7rem !important;
    font-weight: 400 !important;
  }
}

.instructionDisabled {
  color: var(--inst-val-disabled) !important;
  opacity: 0.8;
  font-size: 1.7rem !important;
  font-weight: 400 !important;
}

.instructionHighlighted {
  color: var(--inst-val-highlighted) !important;
  font-size: 1.7rem !important;
  font-weight: 800 !important;
}

.instType {
  div {
    color: var(--inst-type-text-color) !important;
    font-weight: 400;
  }

  rect {
    opacity: 0.3;
    stroke-width: var(--stroke-width);
    stroke: var(--inst-type-stroke);
    fill: var(--inst-type-fill);
  }
}

.instTypeHigh {
  div {
    color: var(--inst-type-text-color-high) !important;
    font-weight: 800;
  }

  rect {
    stroke-width: var(--stroke-width);
    stroke: var(--inst-type-stroke-high);
    fill: var(--inst-type-fill-high);
  }
}

[data-cpuName="ADD4"], [data-cpuName="ADD4"]:hover { 
  path {
    fill: var(--component-text-color);
  }

  div div div {
    font-size: 32px !important;
  }
}

[data-cpuBusWidth] {
  visibility: hidden;
}

#tooltip {
  position: absolute;
  display: none;
  /* background: var(--vscode-problemsInfoIcon-foreground); */
  /* background: var(--vscode-minimap-selectionHighlight); */
  /* background: var(--vscode-inputValidation-errorBorder); */
  background: var(--tooltip-background);
  border: 2px solid var(--tooltip-border);
  border-radius: 3px;
  padding: 10px;
  transform: translateY(-50%);
  font-family: 'Roboto mono';
}

.tooltipinfo {
  font-size: 1rem;
  font-family: monospace;
  h1 {
    font-size: inherit;
    font-style: italic;
    font-weight: 700;
    color: var(--tooltip-text-color-h1);
    padding: 0;
    margin: 0;
  }
  p {
    font-size: 0.8em;
    color: var(--tooltip-text-color);
    padding: 0;
    margin: 0;
    margin-left: 1ch;
  }
  ul {
    font-size: inherit;
    color: var(--tooltip-text-color);
    padding: 1ch;
    margin: 0;
    margin-left: 1ch;
  }
}

